Source: gpac
Section: graphics
Priority: optional
Maintainer: Jean Le Feuvre <jeanlf@gpac.io>
Bugs: mailto:jeanlf@gpac.io
Homepage: http://gpac.io
Standards-Version: 3.8.0
Build-Conflicts: libgpac-dev
Build-Depends: debhelper (>= 6), libc6, libc6-dev, libx11-dev (>= 1.3), zlib1g-dev (>= 1), libfreetype6-dev, libjpeg62-dev | libjpeg62-turbo-dev, libpng-dev, libmad0-dev, libfaad-dev, libogg-dev, libvorbis-dev, libtheora-dev, liba52-dev | liba52-0.7.4-dev, libavcodec-dev, libavformat-dev, libavutil-dev, libswscale-dev, libavdevice-dev, libxv-dev, x11proto-video-dev, libgl1-mesa-dev, x11proto-gl-dev, libxvidcore-dev, libssl-dev (>= 0.9.8), libjack-dev (>= 0.118), libasound2-dev (>= 1.0), libpulse-dev (>= 0.9), libsdl-dev (>= 1.2) | libsdl2-dev, ccache

Package: gpac
Architecture: any
Depends: ${shlibs:Depends}
Description: multimedia framework oriented towards rich media
 GPAC supports many multimedia formats, from simple audiovisual containers (avi, mov, mpg) to complex
 presentation formats (MPEG-4 Systems, SVG Tiny 1.2, VRML/X3D) and 360 videos.
 GPAC supports presentation scripting for MPEG4/VRML/X3D through javascript.
 GPAC currently supports local file playback, HTTP progressive download, Adaptive HTTP Streaming (MPEG-DASH, HLS),
 RTP/RTSP streaming over UDP (unicast or multicast) or TCP, TS demuxing (from file, IP or DVB4Linux), 
 ATSC 3.0 ROUTE sessions, desktop grabbing, camera/microphone inputs and any input format supported by FFmpeg

Package: libgpac-dev
Architecture: any
Section: libdevel
Depends: gpac
Replaces: gpac (<= 0.8.0)
Description: multimedia framework oriented towards rich media
 GPAC supports many multimedia formats, from simple audiovisual containers (avi, mov, mpg) to complex
 presentation formats (MPEG-4 Systems, SVG Tiny 1.2, VRML/X3D) and 360 videos.
 GPAC supports presentation scripting for MPEG4/VRML/X3D through javascript.
 GPAC currently supports local file playback, HTTP progressive download, Adaptive HTTP Streaming (MPEG-DASH, HLS),
 RTP/RTSP streaming over UDP (unicast or multicast) or TCP, TS demuxing (from file, IP or DVB4Linux), 
 ATSC 3.0 ROUTE sessions, desktop grabbing, camera/microphone inputs and any input format supported by FFmpeg
