.TH gpac 1 2019 gpac GPAC
.
.SH NAME
.LP
gpac \- GPAC command-line filter session manager
.SH SYNOPSIS
.LP
.B gpac
.RI [options] FILTER [LINK] FILTER [...]
.br
.
.SH DESCRIPTION
.LP
This page describes all filters usually present in GPAC

To check for help on a filter not listed here, use gpac -h myfilter

.SH inspect
.LP
.br
Description: Inspect packets
.br

.br
The inspector filter can be used to dump pid and packets. It may be used to also check parts of payload of the packets. The default options inspect only pid changes.
.br
The packet inspector can be configured to dump specific properties of packets using -fmt.
.br
When the option is not present, all properties are dumped. Otherwise, only properties identified by $TOKEN$ are printed. You may use '$', '@' or '%' for TOKEN separator. TOKEN can be:
.br
* pn: packet (frame in framed mode) number
.br
* dts: decoding time stamp in stream timescale, N/A if not available
.br
* ddts: difference between current and previous packets decoding time stamp in stream timescale, N/A if not available
.br
* cts: composition time stamp in stream timescale, N/A if not available
.br
* dcts: difference between current and previous packets composition time stamp in stream timescale, N/A if not available
.br
* ctso: difference between composition time stamp and decoding time stamp in stream timescale, N/A if not available
.br
* dur: duration in stream timescale
.br
* frame: framing status: frame_full (complete AU), frame_start, frame_end, frame_cont
.br
* sap or rap: SAP type of the frame
.br
* ilace: interlacing flag (0: progressive, 1: top field, 2: bottom field)
.br
* corr: corrupted packet flag
.br
* seek: seek flag
.br
* bo: byte offset in source, N/A if not available
.br
* roll: roll info
.br
* crypt: crypt flag
.br
* vers: carrousel version number
.br
* size: size of packet
.br
* crc: 32 bit CRC of packet
.br
* lf: insert linefeed
.br
* cr: insert carriage return
.br
* data: hex dump of packet - WARNING, THIS IS BIG !!
.br
* lp: leading picture flag
.br
* depo: depends on other packet flag
.br
* depf: is depended on other packet flag
.br
* red: redundant coding flag
.br
* ck: clock type (used for PCR discontinuities)
.br
- Property name or 4cc.
.br
* pid.P4CC: PID property 4CC
.br
* pid.PropName: PID property name
.br

.br
Example
.br
fmt="PID $pid.ID$ packet $pn$ DTS $dts$ CTS $cts$ $lf$"
.br

.br
This dumps packet number, cts and dts as follows: "PID 1 packet 10 DTS 100 CTS 108 \n"
.br
  
.br
An unrecognized keywork or missing property will resolve to an empty string.
.br

.br
Note: when dumping in interleaved mode, there is no guarantee that the packets will be dumped in their original  sequence order since the inspector fetches one packet at a time on each PID.
.br

.br

.br
.SH Options (expert):
.LP
.br
log (string, default: stderr, minmax: fileName or stderr or stdout): set inspect log filename
.br
mode (enum, default: pck):               dump mode
.br
* pck: dumps full packet
.br
* blk: dumps packets before reconstruction
.br
* frame: force reframer
.br
* raw: dumps source packets without demuxing
.br

.br
interleave (boolean, default: true):     dump packets as they are received on each pid. If false, report per pid is generated
.br
deep (boolean, default: false):          dump packets along with PID state change - implied when -fmt is set
.br
props (boolean, default: true):          dump packet properties - ignored when  -fmt is set, see filter help
.br
dump_data (boolean, default: false, updatable): enable full data dump, WARNING heavy - ignored when  -fmt is set, see filter help
.br
fmt (string, no default, updatable):     set packet dump format - see filter help
.br
hdr (boolean, default: true):            print a header corresponding to fmt string without '$ 'or "pid."
.br
allp (boolean, default: false):          analyse for the entire duration, rather than stoping when all pids are found
.br
info (boolean, default: false):          monitor PID info changes
.br
pcr (boolean, default: false):           dump M2TS PCR info
.br
speed (number, default: 1.0):            set playback command speed. If speed is negative and start is 0, start is set to -1
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
dur (fraction, default: 0/0):            set inspect duration
.br
analyze (boolean, default: false):       analyze sample content (NALU, OBU). This will force XML formatting
.br
xml (boolean, default: false):           use xml formatting. This disables any custom format set through fmt option
.br
test (enum, default: no):                skip predefined stes of properties, used for test mode
.br
* no: no properties skipped
.br
* noprop: all properties/info changes on pid are skipped, only packets are dumped
.br
* network: URL/path dump, cache state, file size properties skipped (used for hashing network results)
.br
* encode: same as network plus skip decoder config (used for hashing encoding results)
.br

.br

.br
.SH probe
.LP
.br
Description: Probe source
.br

.br
The Probe filter is used by applications (typically MP4Box) to query demuxed pids available in a source chain.
.br
The filter does not produce any output nor feedback, it is up to the app developper to query input pids of the prober and take appropriated decisions.
.br

.br
.SH Options (expert):
.LP
.br
log (string, default: stderr, minmax: fileName or stderr or stdout): set inspect log filename
.br
mode (enum, default: pck):               dump mode
.br
* pck: dumps full packet
.br
* blk: dumps packets before reconstruction
.br
* frame: force reframer
.br
* raw: dumps source packets without demuxing
.br

.br
interleave (boolean, default: true):     dump packets as they are received on each pid. If false, report per pid is generated
.br
deep (boolean, default: false):          dump packets along with PID state change - implied when -fmt is set
.br
props (boolean, default: true):          dump packet properties - ignored when  -fmt is set, see filter help
.br
dump_data (boolean, default: false, updatable): enable full data dump, WARNING heavy - ignored when  -fmt is set, see filter help
.br
fmt (string, no default, updatable):     set packet dump format - see filter help
.br
hdr (boolean, default: true):            print a header corresponding to fmt string without '$ 'or "pid."
.br
allp (boolean, default: false):          analyse for the entire duration, rather than stoping when all pids are found
.br
info (boolean, default: false):          monitor PID info changes
.br
pcr (boolean, default: false):           dump M2TS PCR info
.br
speed (number, default: 1.0):            set playback command speed. If speed is negative and start is 0, start is set to -1
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
dur (fraction, default: 0/0):            set inspect duration
.br
analyze (boolean, default: false):       analyze sample content (NALU, OBU). This will force XML formatting
.br
xml (boolean, default: false):           use xml formatting. This disables any custom format set through fmt option
.br
test (enum, default: no):                skip predefined stes of properties, used for test mode
.br
* no: no properties skipped
.br
* noprop: all properties/info changes on pid are skipped, only packets are dumped
.br
* network: URL/path dump, cache state, file size properties skipped (used for hashing network results)
.br
* encode: same as network plus skip decoder config (used for hashing encoding results)
.br

.br

.br
.SH compositor
.LP
.br
Description: Compositor
.br

.br
The GPAC compositor allows mixing audio, video, text and graphics in a timed fashion.
.br
The filter is explicit only and is never loaded during link resolution.
.br
The compositor operates either in media-client or filter-only mode.
.br

.br
In media-client mode, the compositor acts as a pseudo-sink for the video side and creates its own output window.
.br
The video frames are dispatched to the output video pid in the form of frame pointers requiring later GPU read if used.
.br
The audio part acts as a regular filter, potentially mixing and resampling the audio inputs to generate its output.
.br

.br
In filter-only mode, the compositor acts as a regular filter generating frames based on the loaded scene.
.br
It will generate its outputs based on the input video frames.
.br
If no input video frames (e.g. pure BIFS / SVG / VRML), the filter will generate frames based on the -fps, at constant or variable frame rate.
.br
It will stop generating frames as soon as all input streams are done, unless extended/reduced by -dur.
.br
In media-client mode, the special URL gpid:// is used to locate PIDs in the scene description, in order to design scenes independently from source media.
.br
When such a pid is associated to a Background2D node in BIFS (no SVG mapping yet), the compositor operates in passthrough mode.
.br
In this mode, only new input frames on the passthrough pid will generate new frames, and the scene clock matches the input packet time.
.br
The output size and pixel format will be set to the input size and pixel format, unless specified otherwise in the filter options.
.br

.br
If only 2D graphics are used and display driver is not forced, 2D rasterizer will happen in the output pixel format (including YUV pixel formats).
.br
In this case, inplace processing (rasterizing over the input frame data) will be used whenever allowed by input data.
.br

.br
If 3D graphics are used or display driver is forced, OpenGL will be used on offscreen surface and the output packet will be an OpenGL texture.
.br

.br
.SH Specific URL syntaxes
.LP
.br
The compositor accpets any URL type supported by GPAC. It also accepts the following syntaxes for URLs:
.br
* views: creates an auto-stereo scene of N views from views://v1:.:vN. vN can be any type of URL supported by GPAC.- mosaic: creates a mosaic of N views from mosaic://v1:.:vN. vN can be any type of URL supported by GPAC.
.br

.br

.br
.SH Options (expert):
.LP
.br
aa (enum, default: all, updatable):      set anti-aliasing mode for raster graphics - whether the setting is applied or not depends on the graphics module / graphic card.
.br
* none: no anti-aliasing
.br
* text: anti-aliasing for text only
.br
* all: complete anti-aliasing
.br

.br
hlfill (unsigned int, default: 0x0, updatable): set highlight fill color (ARGB)
.br
hlline (unsigned int, default: 0xFF000000, updatable): set highlight stroke color (ARGB)
.br
hllinew (float, default: 1.0, updatable): set highlight stroke width
.br
sz (boolean, default: true, updatable):  enable scalable zoom. When scalable zoom is enabled, resizing the output window will also recompute all vectorial objects. Otherwise only the final buffer is stretched.
.br
bc (unsigned int, default: 0, updatable): default background color to use when displaying transparent images or video with no scene composition instructions
.br
yuvhw (boolean, default: true, updatable): enable YUV hardware for 2D blits
.br
blitp (boolean, default: true, updatable): partial hardware blits (if not set, will force more redraw)
.br
softblt (boolean, default: true):        enable software blit/stretch in 2D. If disabled, vector graphics rasterizer will always be used
.br
stress (boolean, default: false, updatable): enable stress mode of compositor (rebuild all vector graphics and texture states at each frame)
.br
fast (boolean, default: false, updatable): enable speed optimization - whether the setting is applied or not depends on the graphics module / graphic card
.br
bvol (enum, default: no, updatable):     draw bounding volume of objects.
.br
* no: disable bounding box
.br
* box: draws a rectangle (2D) or box (3D mode)
.br
* aabb: draws axis-aligned bounding-box tree (3D only)
.br

.br
textxt (enum, default: default, updatable): specify whether text shall be drawn to a texture and then rendered or directly rendered. Using textured text can improve text rendering in 3D and also improve text-on-video like content
.br
* default: use texturing for OpenGL rendering, no texture for 2D rasterizer
.br
* never: never uses text textures
.br
* always: always render text to texture before drawing
.br

.br
out8b (boolean, default: false, updatable): convert 10-bit video to 8 bit texture before GPU upload.
.br
drop (boolean, default: false, updatable): drop late frame when drawing. By default frames are not droped until a heavy desync of 1 sec is observed
.br
sclock (boolean, default: false, updatable): force synchronizing all streams on a single clock
.br
sgaze (boolean, default: false, updatable): simulate gaze events through mouse
.br
ckey (unsigned int, default: 0, updatable): color key to use in windowless mode (0xFFRRGGBB). GPAC currently does not support true alpha blitting to desktop due to limitations in most windowing toolkit, it therefore uses color keying mechanism. The alpha part of the key is used for global transparency of the output, if supported.
.br
timeout (unsigned int, default: 10000, updatable): timeout in ms after which a source is considered dead
.br
fps (fraction, default: 30/1, updatable): simulation frame rate when animation-only sources are played (ignored when video is present).
.br
timescale (unsigned int, default: 0, updatable): timescale used for output packets when no input video pid. A value of 0 means fps numerator.
.br
autofps (boolean, default: true):        use video input fps for output. If no video or not set, uses -fps. Ignored in player mode
.br
vfr (boolean, default: false):           only emit frames when changes are detected. Always true in player mode
.br
dur (number, default: 0, updatable):     duration of generation. Mostly used when no video input is present. Negative values mean number of frames, positive values duration in second, 0 stops as soon as all streams are done.
.br
fsize (boolean, default: false, updatable): force the scene to resize to the biggest bitmap available if no size info is given in the BIFS configuration
.br
mode2d (enum, default: defer, updatable): specify whether immediate drawing should be used or not
.br
* immediate: the screen is completely redrawn at each frame (always on if passthrough mode is detected).
.br
* defer: object positioning is tracked from frame to frame and dirty rectangles info is collected in order to redraw the minimal amount of the screen buffer.
.br
* debug: only renders changed areas, reseting other areas
.br
Whether the setting is applied or not depends on the graphics module and player mode.
.br

.br
amc (boolean, default: true):            audio multichannel support; if disabled always downmix to stereo. usefull if the multichannel output does not work properly
.br
asr (unsigned int, default: 0):          force output sample rate - 0 for auto
.br
ach (unsigned int, default: 0):          force output channels - 0 for auto
.br
alayout (unsigned int, default: 0):      force output channel layout - 0 for auto
.br
afmt (audio format, default: s16, minmax: none,u8,s16,s24,s32,flt,dbl,u8p,s16p,s24p,s32p,fltp,dblp): force output channel format - 0 for auto
.br
asize (unsigned int, default: 1024):     audio output packet size in samples
.br
abuf (unsigned int, default: 100):       audio output buffer duration in ms - the audio renderer fills the output pid up to this value. A too low value will lower latency but can have real-time playback issues
.br
avol (unsigned int, default: 100, updatable): audio volume in percent
.br
apan (unsigned int, default: 50, updatable): audio pan in percent, 50 is no pan
.br
async (boolean, default: true, updatable): audio resynchronization; if disabled, audio data is never dropped but may get out of sync
.br
buf (unsigned int, default: 3000, updatable): playout buffer in ms. Overriden by BufferLenth property of input pid
.br
rbuf (unsigned int, default: 1000, updatable): rebuffer trigger in ms. Overriden by RebufferLenth property of input pid
.br
mbuf (unsigned int, default: 3000, updatable): max buffer in ms (must be greater than playout buffer). Overriden by BufferMaxOccupancy property of input pid
.br
nojs (boolean, default: false):          disable javascript
.br
ogl (enum, default: auto, updatable):    specify 2D rendering mode
.br
* auto: automatically decides betwwen on, off and hybrid based on content.
.br
* off: disables OpenGL - 3D will not be rendered.
.br
* on: uses OpenGL for all graphics - this will involve polygon tesselation and 2D graphics will not look as nice as 2D mode.
.br
* hybrid: the compositor performs software drawing of 2D graphics with no textures (better quality) and uses OpenGL for all 2D objects with textures and 3D objects.
.br

.br
pbo (boolean, default: false, updatable): enable PixelBufferObjects to push YUV textures to GPU in OpenGL Mode. This may slightly increase the performances of the playback.
.br
nav (enum, default: none, updatable):    override the default navigation mode of MPEG-4/VRML (Walk) and X3D (Examine)
.br
* none: disables navigation
.br
* walk: 3D world walk
.br
* fly: 3D world fly (no ground detection)
.br
* pan: 2D/3D world zomm/pan
.br
* game: 3D world game (mouse gives walk direction)
.br
* slide: 2D/3D world slide
.br
* exam: 2D/3D object examine
.br
* orbit: 3D object orbit
.br
* vr: 3D world VR (yaw/pitch/roll)
.br

.br
linegl (boolean, default: false, updatable): indicate that outlining shall be done through OpenGL pen width rather than vectorial outlining
.br
epow2 (boolean, default: true, updatable): emulate power-of-2 textures for openGL (old hardware). Ignored if OpenGL rectangular texture extension is enabled
.br
* yes: video texture is not resized but emulated with padding. This usually speeds up video mapping on shapes but disables texture transformations
.br
* no: video is resized to a power of 2 texture when mapping to a shape
.br
paa (boolean, default: false, updatable): indicate whether polygon antialiasing should be used in full antialiasing mode. If not set, only lines and points antialiasing are used.
.br
bcull (enum, default: on, updatable):    indicate whether backface culling shall be disable or not
.br
* on: enables backface culling
.br
* off: disables backface culling
.br
* alpha: only enables backface culling for transparent meshes
.br

.br
wire (enum, default: none, updatable):   wireframe mode.
.br
* none: objects are drawn as solid
.br
* only: objects are drawn as wireframe only
.br
* solid: objects are drawn as solid and wireframe is then drawn
.br

.br
norms (enum, default: none, updatable):  normal vector drawing for debug
.br
* none: no normals drawn
.br
* face: one normal per face drawn
.br
* vertex: one normal per vertex drawn
.br

.br
glus (boolean, default: true, updatable): use GLU scale, which may be slower but nicer than GPAC software stretch routines.
.br
rext (boolean, default: true, updatable): use non power of two (rectangular) texture GL extension
.br
cull (boolean, default: true, updatable): use aabb culling: large objects are rendered in multiple calls when not fully in viewport
.br
yuvgl (boolean, default: true, updatable): enable YUV open GL pixel format support if hardware supports it. If not supported and shaders are available, YUV to RGB will be done on GPU
.br
depth_gl_scale (float, default: 100, updatable): set depth scaler
.br
depth_gl_type (enum, default: none, updatable): set geometry type used to draw depth video
.br
* none: no geometric conversion
.br
* point: compute point cloud from pixel+depth
.br
* strip: same as point but thins point set
.br

.br
nbviews (unsigned int, default: 0, updatable): number of views to use in stereo mode
.br
stereo (enum, default: none, updatable): stereo output type. If your graphic card does not support OpenGL shaders, only top and side modes will be available.
.br
* side: images are displayed side by side from left to right.
.br
* top: images are displayed from top (laft view) to bottom (right view).
.br
* hmd: same as side except that view aspect ratio is not changed.
.br
* ana: standard color anaglyph (red for left view, green and blue for right view) is used (forces views=2).
.br
* cols: images are interleaved by columns, left view on even columns and left view on odd columns (forces views=2).
.br
* rows: images are interleaved by columns, left view on even rows and left view on odd rows (forces views=2).
.br
* spv5: images are interleaved by for SpatialView 5 views display, fullscreen mode (forces views=5).
.br
* alio8: images are interleaved by for Alioscopy 8 views displays, fullscreen mode (forces views=8).
.br
* custom: images are interleaved according to the shader file indicated in -mvshader. The shader is exposed each view as uniform sampler2D gfViewX, where X is the view number starting from the left
.br

.br
mvshader (string, no default, updatable): file path to the custom multiview interleaving shader
.br
fpack (enum, default: none, updatable):  default frame packing of input video
.br
* none: no frame packing
.br
* top: top bottom frame packing
.br
* side: side by side packing
.br

.br
camlay (enum, default: offaxis, updatable): camera layout in multiview modes
.br
* straight: camera is moved along a straight line, no rotation
.br
* offaxis: off-axis projection is used
.br
* linear: camera is moved along a straight line with rotation
.br
* circular: camera is moved along a circle with rotation
.br

.br
iod (float, default: 6.4, updatable):    inter-occular distance (eye separation) in cm (distance between the cameras). 
.br
rview (boolean, default: false, updatable): reverse view order
.br
tvtn (unsigned int, default: 30, updatable): number of point sampling for tile visibility algo
.br
tvtt (unsigned int, default: 0, updatable): number of points above which the tile is considered visible
.br
tvtd (boolean, default: false, updatable): disable the tile having full coverage of the SRD, only displaying partial tiles
.br
tvtf (boolean, default: false, updatable): force all tiles to be considered visible, regardless of viewpoint
.br
fov (float, default: 1.570796326794897, updatable): default field of view for VR
.br
vertshader (string, no default):         path to vertex shader file
.br
fragshader (string, no default):         path to fragment shader file
.br
autocal (boolean, default: false, updatable): auto callibration of znear/zfar in depth rendering mode
.br
dispdepth (int, default: -1, updatable): display depth, negative value uses default screen height
.br
dispdist (float, default: 50, updatable): distance in cm between the camera and the zero-disparity plane. There is currently no automatic calibration of depth in GPAC
.br
focdist (float, default: 0, updatable):  distance of focus point
.br
wfont (float, default: 0, updatable):    wait for SVG fonts to be loaded before displaying frames
.br
osize (vec2d int, default: 0x0, updatable): force output size. If not set, size is derived from inputs
.br
dpi (vec2d int, default: 96x96, updatable): default dpi if not indicated by video output
.br
dbgpvr (float, default: 0, updatable):   debug scene used by PVR addon
.br
player (boolean, default: false):        set compositor in player mode, see filter help
.br
opfmt (pixel format, default: none):     pixel format to use for output. Ignored in -player mode
.br
drv (enum, default: auto):               indicate if graphics driver should be used. Ignored in player mode
.br
* no: never loads a graphics driver (software blitting used, no 3D possible)
.br
* yes: always loads a graphics driver. Output pixel format will be RGB
.br
* auto: decides based on the loaded content
.br

.br

.br
.SH mp4dmx
.LP
.br
Description: ISOBMFF/QT demuxer
.br

.br
When scalable tracks are present in a file, the reader can operate in 3 modes using -smode option:
.br
* smode=single: resolves all extractors to extract a single bitstream from a scalable set. The highest level is used
.br
In this mode, there is no enhancement decoder config, only a base one resulting from the merge of the configs
.br
* smode=split: all extractors are removed and every track of the scalable set is declared. In this mode, each enhancement track has no base decoder config
.br
and an enhancement decoder config.
.br
* smode=splitx: extractors are kept in the bitstream, and every track of the scalable set is declared. In this mode, each enhancement track has a base decoder config
.br
 (copied from base) and an enhancement decoder config. This is mostly used for DASHing content.
.br
Warning: smode=splitx will result in extractor NAL units still present in the output bitstream, which shall only be true if the output is ISOBMFF based
.br

.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
allt (boolean, default: false):          load all tracks even if unknown
.br
	
.br
noedit (boolean, default: false):        do not use edit lists
.br
itt (boolean, default: false):           convert all items of root meta into a single PID
.br
itemid (boolean, default: true):         keep item IDs in PID properties
.br
smode (enum, default: split):            load mode for scalable/tile tracks
.br
* split: each track is declared, extractors are removed
.br
* splitx: each track is declared, extractors are kept
.br
* single: a single track is declared (highest level for scalable, tile base for tiling)
.br

.br
alltk (boolean, default: false):         declare all tracks even disabled ones
.br
frame_size (unsigned int, default: 1024): frame size for raw audio samples (dispatches frame_size samples per packet)
.br
expart (boolean, default: true):         expose cover art as a dedicated video pid
.br
stsd (unsigned int, default: 0):         only extract sample mapped to the given sample desciption index. 0 means no filter
.br

.br
.SH bifsdec
.LP
.br
Description: MPEG-4 BIFS decoder
.br

.br
This filter decodes MPEG-4 BIFS frames directly into the scene graph of the compositor. It cannot be used to dump BIFS content.
.br

.br
No options
.br

.br
.SH odfdec
.LP
.br
Description: MPEG-4 OD decoder
.br

.br
This filter decodes MPEG-4 OD frames directly into the scene manager of the compositor. It cannot be used to dump OD content.
.br

.br
No options
.br

.br
.SH fin
.LP
.br
Description: File input
.br

.br
This filter dispatch raw blocks from input file into a filter chain.
.br
Block size can be adjusted using -block_size.
.br
Content format can be forced through -mime and file extension can be changed through -ext.
.br
Note: Unless disabled at session level (see -no-probe ), file extensions are usually ignored and format probing is done on the first data block.
.br
The special file name "null" is used for creating a file with no data, needed by some filters such as dasher.
.br
The special file name "rand" is used to generate random data.
.br
The special file name "randsc" is used to generate random data with fake startcodes (0x000001).
.br

.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
block_size (unsigned int, default: 0):   block size used to read file. 0 means 5000 if file less than 500m, 1M otherwise.
.br
range (64-bit fraction, default: 0-0):   byte range
.br
ext (string, no default):                override file extension
.br
mime (string, no default):               set file mime type
.br

.br
.SH btplay
.LP
.br
Description: BT/XMT/X3D loader
.br

.br
This filter parses MPEG-4 BIFS (BT and XMT), VRML97 and X3D (wrl and XML) files directly into the scene graph of the compositor. It cannot be used to dump content.
.br

.br
.SH Options (expert):
.LP
.br
progressive (boolean, default: false):   enable progressive loading
.br
sax_dur (unsigned int, default: 1000):   loading duration for SAX parsing (XMT), 0 disables SAX parsing
.br

.br
.SH httpin
.LP
.br
Description: HTTP input
.br

.br
This filter dispatch raw blocks from input file into a filter chain.
.br
Block size can be adjusted using -block_size, and disk caching policies can be adjusted.
.br
Content format can be forced through -mime and file extension can be changed through -ext.
.br
Note: Unless disabled at session level (see -no-probe ), file extensions are usually ignored and format probing is done on the first data block.
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
block_size (unsigned int, default: 1000000): block size used to read file
.br
cache (enum, default: disk):             set cache mode
.br
* disk: cache to disk,  discard once session is no longer used
.br
* disk: cache to disk and keep
.br
* mem: stores to memory, discard once session is no longer used
.br
* none: no cache
.br

.br
range (64-bit fraction, default: 0-0):   set byte range, as fraction
.br
ext (string, no default):                override file extension
.br
mime (string, no default):               set file mime type
.br

.br
.SH svgplay
.LP
.br
Description: SVG loader
.br

.br
This filter parses SVG files directly into the scene graph of the compositor. It cannot be used to dump content.
.br

.br
.SH Options (expert):
.LP
.br
sax_dur (unsigned int, default: 0):      loading duration for SAX parsing, 0 disables SAX parsing
.br

.br
.SH rfimg
.LP
.br
Description: JPG/J2K/PNG/BMP reframer
.br

.br
This filter parses JPG/J2K/PNG/BMP files/data and outputs corresponding visual PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
timescale (unsigned int, default: 1000): timescale for media timestamps when loading from file not stream
.br
dur (unsigned int, default: 1000):       duration of image when loading from file not stream
.br

.br
.SH imgdec
.LP
.br
Description: PNG/JPG decoder
.br

.br
This filter decodes JPEG and PNG images.
.br

.br
No options
.br

.br
.SH rfadts
.LP
.br
Description: ADTS reframer
.br

.br
This filter parses AAC files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
frame_size (unsigned int, default: 1024): size of AAC frame in audio samples
.br
index (number, default: 1.0):            indexing window length
.br
mpeg4 (boolean, default: false):         force signaling as MPEG-4 AAC
.br
ovsbr (boolean, default: false):         force oversampling SBR (does not multiply timescales by 2)
.br
sbr (enum, default: no):                 set SBR signaling
.br
* no: no SBR signaling at all
.br
* imp: backward-compatible SBR signaling (audio signaled as AAC-LC)
.br
* exp: explicit SBR signaling (audio signaled as AAC-SBR)
.br

.br
ps (enum, default: no):                  set PS signaling
.br
* no: no PS signaling at all
.br
* imp: backward-compatible PS signaling (audio signaled as AAC-LC)
.br
* exp: explicit PS signaling (audio signaled as AAC-PS)
.br

.br

.br
.SH rflatm
.LP
.br
Description: LATM reframer
.br

.br
This filter parses AAC in LATM files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
frame_size (unsigned int, default: 1024): size of AAC frame in audio samples
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH rfmp3
.LP
.br
Description: MP3 reframer
.br

.br
This filter parses MPEG-1/2 audio files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
index (number, default: 1.0):            indexing window length
.br
expart (boolean, default: false):        expose pictures as a dedicated video pid
.br

.br
.SH faad
.LP
.br
Description: FAAD decoder
.br

.br
This filter decodes AAC streams through faad library.
.br

.br
No options
.br

.br
.SH maddec
.LP
.br
Description: MAD decoder
.br

.br
This filter decodes MPEG 1/2 audio streams through libmad library.
.br

.br
No options
.br

.br
.SH xviddec
.LP
.br
Description: XVid decoder
.br

.br
This filter decodes MPEG-4 part 2 (and DivX) through libxvidcore library.
.br

.br
.SH Options (expert):
.LP
.br
deblock_y (boolean, default: false):     enable Y deblocking
.br
deblock_uv (boolean, default: false):    enable UV deblocking
.br
film_effect (boolean, default: false):   enable film effect
.br
dering_y (boolean, default: false):      enable Y deblocking
.br
dering_uv (boolean, default: false):     enable UV deblocking
.br

.br
.SH j2kdec
.LP
.br
Description: OpenJPEG2000 decoder
.br

.br
This filter decodes JPEG2000 streams through OpenJPEG2000 library.
.br

.br
No options
.br

.br
.SH rfac3
.LP
.br
Description: AC3 reframer
.br

.br
This filter parses AC3 and E-AC3 files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH a52dec
.LP
.br
Description: A52 decoder
.br

.br
This filter decodes AC3 streams through a52dec library.
.br

.br
No options
.br

.br
.SH rfamr
.LP
.br
Description: AMR/EVRC reframer
.br

.br
This filter parses AMR, AMR Wideband, EVRC and SMV files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH oggdmx
.LP
.br
Description: OGG demuxer
.br

.br
This filter demultiplexes OGG files/data into a set of media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
index (number, default: 1.0):            indexing window length (unimplemented, only 0 disables stream probing for duration), 
.br

.br
.SH vorbisdec
.LP
.br
Description: Vorbis decoder
.br

.br
This filter decodes Vorbis streams through libvorbis library.
.br

.br
No options
.br

.br
.SH theoradec
.LP
.br
Description: Theora decoder
.br

.br
This filter decodes Theora streams through libtheora library.
.br

.br
No options
.br

.br
.SH m2tsdmx
.LP
.br
Description: MPEG-2 TS demuxer
.br

.br
This filter demultiplexes MPEG-2 Transport Stream files/data into a set of media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
temi_url (string, no default):           force TEMI URL
.br
dsmcc (boolean, default: no):            enable DSMCC receiver
.br

.br
.SH sockin
.LP
.br
Description: UDP/TCP input
.br

.br
This filter handles generic TCP and UDP input sockets. It can also probe for MPEG-2 TS over RTP input. Probing of MPEG-2 TS over UDP/RTP is enabled by default but can be turned off.
.br

.br
Format of data can be specified by setting either -ext or -mime options. If not set, the format will be guessed by probing the first data packet
.br

.br
UDP sockets are used for source URLs formatted as udp://NAME
.br
TCP sockets are used for source URLs formatted as tcp://NAME
.br
UDP unix domain sockets are used for source URLs formatted as udpu://NAME
.br
TCP unix domain sockets are used for source URLs formatted as tcpu://NAME
.br

.br
On OSX with VM packet replay you will need to force multicast routing, eg: route add -net 239.255.1.4/32 -interface vboxnet0
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
block_size (unsigned int, default: 10000): block size used to read socket
.br
sockbuf (unsigned int, default: 65536):  socket max buffer size
.br
port (unsigned int, default: 1234):      default port if not specified
.br
ifce (string, no default):               default multicast interface
.br
listen (boolean, default: false):        indicate the input socket works in server mode
.br
ka (boolean, default: false):            keep socket alive if no more connections
.br
maxc (unsigned int, default: +I):        max number of concurrent connections
.br
tsprobe (boolean, default: true):        probe for MPEG-2 TS data, either RTP or raw UDP. Disabled if mime or ext are given and do not match MPEG-2 TS mimes/extensions
.br
ext (string, no default):                indicate file extension of udp data
.br
mime (string, no default):               indicate mime type of udp data
.br
block (boolean, default: false):         set blocking mode for socket(s)
.br
timeout (unsigned int, default: 5000):   set timeout in ms for UDP socket(s)
.br
reorder_pck (unsigned int, default: 100): number of packets delay for RTP reordering (M2TS over RTP) 
.br
reorder_delay (unsigned int, default: 10): number of ms delay for RTP reordering (M2TS over RTP)
.br

.br
.SH osvcdec
.LP
.br
Description: OpenSVC decoder
.br

.br
This filter decodes scalable AVC|H264 streams through OpenSVC library.
.br

.br
No options
.br

.br
.SH vtbdec
.LP
.br
Description: VideoToolBox decoder
.br

.br
This filter decodes MPEG-2, H263, AVC|H264 and HEVC streams through VideoToolBox. It allows GPU frame dispatch or direct frame copy.
.br

.br
.SH Options (expert):
.LP
.br
reorder (unsigned int, default: 6):      number of frames to wait for temporal re-ordering
.br
no_copy (boolean, default: true):        dispatch VTB frames into filter chain (no copy)
.br
ofmt (pixel format, default: nv12):      set default pixel format for decoded video. If not matched default to nv12
.br
disable_hw (boolean, default: false):    disable hardware decoding
.br

.br
.SH lsrdec
.LP
.br
Description: MPEG-4 LASeR decoder
.br

.br
This filter decodes MPEG-4 LASeR frames directly into the scene graph of the compositor. It cannot be used to dump LASeR content.
.br

.br
No options
.br

.br
.SH safdmx
.LP
.br
Description: SAF demuxer
.br

.br
This filter demultiplexes SAF (MPEG-4 Simple Aggregation Format for LASeR) files/data into a set of media PIDs and frames.
.br

.br
No options
.br

.br
.SH dashin
.LP
.br
Description: MPEG-DASH and HLS client
.br

.br
This filter reads MPEG-DASH, HLS and MS Smooth (on demand only) manifests and produces media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
auto_switch (unsigned int, default: 0):  switch quality every N segments, disabled if 0
.br
store (enum, default: mem):              enable file caching
.br
* mem: all files are stored in memory, no disk IO
.br
* file: files are stored to disk but discarded once played
.br
* cache: all files are stored to disk and kept
.br

.br
algo (enum, default: gbuf):              adaptation algorithm to use
.br
* none: no adaptation logic
.br
* grate: GAPC legacy algo based on available rate
.br
* gbuf: GAPC legacy algo based on buffer occupancy
.br
* bba0: BBA-0
.br
* bolaf: BOLA Finite
.br
* bolab: BOLA Basic
.br
* bolau: BOLA-U
.br
* bolao: BOLA-O
.br

.br
start_with (enum, default: max_bw):      initial selection criteria
.br
* min_q: start with lowest quality
.br
* max_q: start with highest quality
.br
* min_bw: start with lowest bitrate
.br
* max_bw: start with highest bitrate; for tiles are used, all low priority tiles will have the lower (below max) bandwidth selected
.br
* max_bw_tiles: start with highest bitrate; for tiles all low priority tiles will have their lowest bandwidth selected
.br

.br
max_res (boolean, default: true):        use max media resolution to configure display
.br
immediate (boolean, default: false):     when interactive switching is requested and immediate is set, the buffer segments are trashed
.br
abort (boolean, default: false):         allow abort during a segment download
.br
use_bmin (boolean, default: false):      use the indicated min buffer time of the MPD if true, otherwise uses default player settings
.br
shift_utc (int, default: 0):             shift DASH UTC clock
.br
atsc_shift (int, default: 0):            shift ATSC requests time by given ms
.br
server_utc (boolean, default: yes):      use ServerUTC: or Date: http headers instead of local UTC
.br
screen_res (boolean, default: yes):      use screen resolution in selection phase
.br
timeshift (unsigned int, default: 0):    set initial timshift in ms (if >0) or in %% of timeshift buffer (if <0)
.br
tile_mode (enum, default: none):         tile adaptation mode
.br
* none: bitrate is shared equaly accross all tiles
.br
* rows: bitrate decreases for each row of tiles starting from the top, same rate for each tile on the row
.br
* rrows: bitrate decreases for each row of tiles starting from the bottom, same rate for each tile on the row
.br
* mrows: bitrate decreased for top and bottom rows only, same rate for each tile on the row
.br
* cols: bitrate decreases for each columns of tiles starting from the left, same rate for each tile on the columns
.br
* rcols: bitrate decreases for each columns of tiles starting from the right, same rate for each tile on the columns
.br
* mcols: bitrate decreased for left and right columns only, same rate for each tile on the columns
.br
* center: bitrate decreased for all tiles on the edge of the picture
.br
* edges: bitrate decreased for all tiles on the center of the picture
.br

.br
tiles_rate (unsigned int, default: 100): indicate the amount of bandwidth to use at each quality level. The rate is recursively applied at each level, e.g. if 50%, Level1 gets 50%, level2 gets 25%, ... If 100, automatic rate allocation will be done by maximizing the quality in order of priority. If 0, bitstream will not be smoothed across tiles/qualities, and concurrency may happen between different media.
.br
delay40X (unsigned int, default: 500):   delay in millisconds to wait between two 40X on the same segment
.br
exp_threshold (unsigned int, default: 100): delay in millisconds to wait after the segment AvailabilityEndDate before considering the segment lost
.br
switch_count (unsigned int, default: 1): indicate how many segments the client shall wait before switching up bandwidth. If 0, switch will happen as soon as the bandwidth is enough, but this is more prone to network variations
.br
aggressive (boolean, default: no):       if enabled, switching algo targets the closest bandwidth fitting the available download rate. If no, switching algo targets the lowest bitrate representation that is above the currently played (eg does not try to switch to max bandwidth)
.br
debug_as (unsigned int, default: -1):    play only the adaptation set indicated by its index in the MPD; if negative, all sets are used
.br
speedadapt (boolean, default: no):       enable adaptation based on playback speed
.br
noxlink (boolean, default: no):          disable xlink if period has both xlink and adaptation sets
.br
query (string, no default):              set query string (without initial '?') to append to xlink of periods
.br

.br
.SH cdcrypt
.LP
.br
Description: CENC decryptor
.br

.br
The CENC decryptor supports decrypting CENC, ISMA and Adobe streams. It uses a configuration file for retrieving keys.
.br
The syntax is available at https://github.com/gpac/gpac/wiki/Common-Encryption
.br
The file can be set per PID using the property DecryptFile (highest priority), CryptFile (lower priority) or set at the filter level using -cfile (lowest priority).
.br
When the file is set per PID, the first CrypTrack with the same ID is used, otherwise the first CrypTrack is used.
.br

.br
.SH Options (expert):
.LP
.br
cfile (string, no default):              crypt file location - see filter help
.br

.br
.SH cecrypt
.LP
.br
Description: CENC  encryptor
.br

.br
The CENC encryptor supports CENC, ISAM and Adobe encryption. It uses a configuration file for declaring keys.
.br
The syntax is available at https://github.com/gpac/gpac/wiki/Common-Encryption
.br
The file can be set per PID using the property CryptFile, or set at the filter option level.
.br
When the file is set per PID, the first CrypTrack with the same ID is used, otherwise the first CrypTrack is used.
.br

.br
.SH Options (expert):
.LP
.br
cfile (string, no default):              crypt file location - see filter help
.br

.br
.SH mp4mx
.LP
.br
Description: ISOBMFF/QT muxer
.br

.br
Muxes file according to ISOBMFF (14496-12 and derived specifications) or QuickTime
.br

.br
By default all input PIDs with ItemID property set are muxed as items, otherwise they are muxed as tracks.
.br
To prevent source items to be muxed as items, use -itemid option from ISOBMF demuxer.
.br
Example
.br
-i source.mp4:itemid=false -o file.mp4
.br

.br
  
.br
To force non-item streams to be muxed as items, use #ItemID option on that PID:
.br
Example
.br
-i source.jpg:#ItemID=1 -o file.mp4
.br

.br
  
.br
The cache mode allows controling how DASH onDemand segments are generated:
.br
-  When disabled, SIDX size will be estimated based on duration and DASH segment length, and padding will be used in the file before the final SIDX.
.br
- When enabled, file data is stored to a temporary file on disk and flushed upon completion, no padding is present.
.br

.br

.br
.SH Options (expert):
.LP
.br
m4sys (boolean, default: false):         force MPEG-4 Systems signaling of tracks
.br
dref (boolean, default: false):          only references data from source file - not compatible with all media sources
.br
ctmode (enum, default: edit):            set composition offset mode for video tracks.
.br
* edit: uses edit lists to shift first frame to presentation time 0
.br
* noedit: ignore edit lists and does not shift timeline
.br
* negctts: uses ctts v1 with possibly negative offsets and no edit lists
.br

.br
idur (fraction, default: 0):             only import the specified duration
.br
pack3gp (unsigned int, default: 1):      pack a given number of 3GPP audio frames in one sample
.br
importer (boolean, default: false):      compatibility with old importer, displays import progress
.br
pack_nal (boolean, default: false):      repack NALU size length to minimum possible size for AVC/HEVC/...
.br
xps_inband (enum, default: no):          use inband (in sample data) param set for AVC/HEVC/...
.br
* no: paramater sets are not inband, several sample descriptions might be created
.br
* all: paramater sets are inband, no param sets in sample description
.br
* mix: creates non-standard files using single sample entry with first PSs found, and moves other PS inband
.br

.br
store (enum, default: inter):            file storage mode
.br
* inter: uses cdur to interleave the file
.br
* flat: writes a flat file, moov at end
.br
* cap: flushes to disk as soon as samples are added
.br
* tight:  uses per-sample interleaving of all tracks
.br
* frag: fragments the file using cdur duration
.br
* sfrag: framents the file using cdur duration but adjusting to start with SAP1/3
.br

.br
cdur (number, default: -1.0):            chunk duration for interleaving and fragmentation modes
.br
* 0: no specific interleaving but moov first
.br
* negative: defaults to 1.0 unless overriden by storage profile
.br
moovts (int, default: 600):              timescale to use for movie. A negative value picks the media timescale of the first track added
.br
moof_first (boolean, default: true):     generate fragments starting with moof then mdat
.br
abs_offset (boolean, default: false):    use absolute file offset in fragments rather than offsets from moof
.br
fsap (boolean, default: true):           split truns in video fragments at SAPs to reduce file size
.br
subs_sidx (int, default: -1):            number of subsegments per sidx. negative value disables sidx
.br
m4cc (string, no default):               4 character code of empty box to appen at the end of a segment
.br
chain_sidx (boolean, default: false):    use daisy-chaining of SIDX
.br
msn (unsigned int, default: 1):          sequence number of first moof to N
.br
msninc (unsigned int, default: 1):       sequence number increase between moofs
.br
tfdt (64-bit fraction, default: 0):      set TFDT of first traf
.br
tfdt_traf (boolean, default: false):     set TFDT in each traf
.br
nofragdef (boolean, default: false):     disable default flags in fragments
.br
straf (boolean, default: false):         use a single traf per moov (smooth streaming and co)
.br
strun (boolean, default: false):         use a single traf per moov (smooth streaming and co)
.br
psshs (enum, default: moov):             set PSSH boxes store mode
.br
* moof: in first moof of each segments
.br
* moov: in movie box
.br
* none: pssh is discarded
.br

.br
sgpd_traf (boolean, default: false):     store sample group descriptions in traf (duplicated for each traf). If not used, sample group descriptions are stored in the movie box
.br
cache (boolean, default: false):         enable temp storage for VoD dash modes - see filter help
.br
noinit (boolean, default: false):        do not produce initial moov, used for DASH bitstream switching mode
.br
tktpl (enum, default: yes):              use track box from input if any as a template to create new track
.br
* no: disables template
.br
* yes: clones the track (except edits and decoder config)
.br
* udta: only loads udta
.br

.br
mudta (enum, default: yes):              use udta and other moov extension boxes from input if any
.br
* no: disables import
.br
* yes: clones all extension boxes
.br
* udta: only loads udta
.br

.br
tmpd (string, no default):               set temp dire for intermediate file(s)
.br
mvex (boolean, default: false):          set mvex after tracks
.br
tkid (unsigned int, default: 0):         track ID of created track for single track. Default 0 uses next available trackID
.br
fdur (boolean, default: false):          fragment based on fragment duration rather than CTS. Mostly used for MP4Box -frag option
.br
btrt (boolean, default: true):           set btrt box in sample description
.br
mediats (int, default: 0):               set media timescale. A value of 0 means inherit from pid, a value of -1 means derive from samplerate or frame rate
.br
ase (enum, default: v0):                 set audio sample entry mode for more than stereo layouts
.br
* v0: use v0 signaling but channel count from stream, recommended for backward compatibility
.br
* v0s: use v0 signaling and force channel count to 2 (stereo) if more than 2 channels
.br
* v1: use v1 signaling, ISOBMFF style
.br
* v1qt: use v1 signaling, QTFF style
.br

.br
ssix (boolean, default: false):          create ssix when sidx is present, level 1 mappping I-frames byte ranges, level 0xFF mapping the rest
.br
ccst (boolean, default: false):          insert coding constraint box for video tracks
.br
maxchunk (unsigned int, default: 0):     set max chunk size in bytes for runs (only used in non-fragmented mode). 0 means no constraints
.br
block_size (unsigned int, default: 10000): target output block size, 0 for default internal value (10k)
.br

.br
.SH rfqcp
.LP
.br
Description: QCP reframer
.br

.br
This filter parses QCP files/data and outputs corresponding audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH rfh263
.LP
.br
Description: H263 reframer
.br

.br
This filter parses H263 files/data and outputs corresponding visual PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
fps (fraction, default: 15000/1000):     import frame rate
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH rfmpgvid
.LP
.br
Description: M1V/M2V/M4V reframer
.br

.br
This filter parses MPEG-1/2 and MPEG-4 part 2 video files/data and outputs corresponding video PID and frames.
.br
Note: The demux uses negative CTS offsets: CTS is corrrect, but some frames may have DTS > CTS.
.br

.br
.SH Options (expert):
.LP
.br
fps (fraction, default: 25000/1000):     import frame rate
.br
index (number, default: 1.0):            indexing window length
.br
vfr (boolean, default: false):           set variable frame rate import
.br
importer (boolean, default: false):      compatibility with old importer, displays import results
.br

.br
.SH nhntr
.LP
.br
Description: NHNT reader
.br

.br
This filter reads NHNT files/data to produce a media PID and frames.
.br
NHNT documentation is available at https://github.com/gpac/gpac/wiki/NHNT-Format
.br

.br

.br
.SH Options (expert):
.LP
.br
reframe (boolean, default: false):       force reparsing of referenced content
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH nhmlr
.LP
.br
Description: NHML parser
.br

.br
This filter reads NHML files/data to produce a media PID and frames.
.br
NHML documentation is available at https://github.com/gpac/gpac/wiki/NHML-Format
.br

.br

.br
.SH Options (expert):
.LP
.br
reframe (boolean, default: false):       force reparsing of referenced content
.br
index (number, default: 1.0):            indexing window length
.br

.br
.SH rfnalu
.LP
.br
Description: AVC/HEVC reframer
.br

.br
This filter parses AVC|H264 and HEVC files/data and outputs corresponding video PID and frames.
.br
This demuxer only produces ISOBMFF-compatible output: start codes are removed, NALU length field added and avcC/hvcC config created.
.br
Note: The demux uses negative CTS offsets: CTS is corrrect, but some frames may have DTS > CTS.
.br

.br
.SH Options (expert):
.LP
.br
fps (fraction, default: 25000/1000):     import frame rate
.br
autofps (boolean, default: true):        detect FPS from bitstream, fallback to -fps option if not possible
.br
index (number, default: -1.0):           indexing window length. If 0, bitstream is not probed for duration. A negative value skips the indexing if the source file is larger than 100M (slows down importers) unless a play with start range > 0 is issued, otherwise uses the positive value
.br
explicit (boolean, default: false):      use explicit layered (SVC/LHVC) import
.br
strict_poc (boolean, default: false):    delay frame output of an entire GOP to ensure CTS info is correct when POC suddenly changes
.br
nosei (boolean, default: false):         remove all sei messages
.br
nosvc (boolean, default: false):         remove all SVC/MVC/LHVC data
.br
novpsext (boolean, default: false):      remove all VPS extensions
.br
importer (boolean, default: false):      compatibility with old importer, displays import results
.br
nal_length (unsigned int, default: 4):   set number of bytes used to code length field: 1, 2 or 4
.br
subsamples (boolean, default: false):    import subsamples information
.br
deps (boolean, default: false):          import samples dependencies information
.br
seirw (boolean, default: true):          rewrite AVC sei messages for ISOBMFF constraints
.br
audelim (boolean, default: false):       keep Access Unit delimiter in payload
.br

.br
.SH m2psdmx
.LP
.br
Description: MPEG PS demuxer
.br

.br
This filter demultiplexes MPEG-2 program stream files/data to produce media PIDs and frames.
.br

.br
No options
.br

.br
.SH avidmx
.LP
.br
Description: AVI demuxer
.br

.br
This filter demultiplexes AVI files/data to produce media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
fps (fraction, default: 1/0):            import frame rate, default is AVI one
.br
importer (boolean, default: false):      compatibility with old importer, displays import results
.br

.br
.SH txtin
.LP
.br
Description: Subtitle loader
.br

.br
This filter reads subtitle data (srt/webvtt/ttxt/sub) to produce media PIDs and frames.
.br
The TTXT documentation is available at https://github.com/gpac/gpac/wiki/TTXT-Format-Documentation
.br

.br

.br
.SH Options (expert):
.LP
.br
webvtt (boolean, default: false):        force WebVTT import of SRT files
.br
nodefbox (boolean, default: false):      skip default text box
.br
noflush (boolean, default: false):       skip final sample flush for srt
.br
fontname (string, no default):           default font to use
.br
fontsize (unsigned int, default: 18):    default font size
.br
lang (string, no default):               default language to use
.br
width (unsigned int, default: 0):        default width of text area, set to 0 to resolve against visual PIDs
.br
height (unsigned int, default: 0):       default height of text area, set to 0 to resolve against visual PIDs
.br
x (unsigned int, default: 0):            default horizontal offset of text area: -1 (left), 0 (center) or 1 (right)
.br
y (unsigned int, default: 0):            default vertical offset of text area: -1 (bottom), 0 (center) or 1 (top)
.br
zorder (int, default: 0):                default z-order of the PID
.br
timescale (unsigned int, default: 1000): default timescale of the PID
.br

.br
.SH ttxtdec
.LP
.br
Description: TTXT/TX3G decoder
.br

.br
This filter decodes TTXT/TX3G streams directly into the scene graph of the compositor. It cannot be used to dump TTXT/TX3G content.
.br
The TTXT documentation is available at https://github.com/gpac/gpac/wiki/TTXT-Format-Documentation
.br

.br

.br
.SH Options (expert):
.LP
.br
texture (boolean, default: false):       use texturing for output text
.br
outline (boolean, default: false):       draw text outline
.br
width (unsigned int, default: 400):      default width when standalone rendering
.br
height (unsigned int, default: 200):     default height when standalone rendering
.br

.br
.SH vttdec
.LP
.br
Description: WebVTT decoder
.br

.br
This filter decodes WebVTT streams directly into a javascript context of the compositor. It cannot be used to dump WebVTT content.
.br

.br
.SH Options (expert):
.LP
.br
script (string, default: $GPAC_SHARED/scripts/webvtt-renderer.js): location of WebVTT SVG JS renderer
.br

.br
.SH rtpin
.LP
.br
Description: RTP/RTSP/SDP input
.br

.br
This filter handles SDP file reading, rtp direct url and RTSP session and produces media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content (SDP, RTP or RTSP URL)
.br
firstport (unsigned int, default: 0):    default first port number to use. 0 lets the filter decide
.br
ifce (string, no default):               default interface IP to use for multicast. If NULL, the default system interface will be used
.br
ttl (unsigned int, default: 127, minmax: 0-127): multicast TTL
.br
reorder_len (unsigned int, default: 1000): reorder length in packets
.br
reorder_delay (unsigned int, default: 50): max delay in RTP reorderer, packets will be dispatched after that
.br
block_size (unsigned int, default: 0x200000): buffer size fur RTP/UDP or RTSP when interleaved
.br
disable_rtcp (boolean, default: false):  disable RTCP reporting
.br
nat_keepalive (unsigned int, default: 0): delay in ms of NAT keepalive, disabled by default (except for SatIP, set to 30s by default)
.br
force_mcast (string, no default):        force multicast on indicated IP in RTSP setup
.br
use_client_ports (boolean, default: false): force using client ports  (hack for some RTSP servers overriding client ports)
.br
bandwidth (unsigned int, default: 0):    set bandwidth param for RTSP requests
.br
default_port (unsigned int, default: 554, minmax: 0-65535): set default RTSP port
.br
satip_port (unsigned int, default: 1400, minmax: 0-65535): set default port for SATIP
.br
interleave (boolean, default: false):    set RTP over RTSP
.br
udp_timeout (unsigned int, default: 10000): default timeout before considering UDP is down
.br
rtsp_timeout (unsigned int, default: 3000): default timeout before considering RTSP is down
.br
rtcp_timeout (unsigned int, default: 5000): default timeout for RTCP trafic in ms. After this timeout, playback will start unsync. If 0 always wait for RTCP
.br
autortsp (boolean, default: true):       automatically reconfig RTSP interleaving if UDP timeout
.br
first_packet_drop (unsigned int, default: 0): set number of first RTP packet to drop - 0 if no drop
.br
frequency_drop (unsigned int, default: 0): drop 1 out of N packet - 0 disable droping
.br
user_agent (string, default: $GPAC_UA):  user agent string, by default solved from GPAC preferences
.br
languages (string, default: $GPAC_LANG): user languages, by default solved from GPAC preferences
.br
stats (unsigned int, default: 500):      update statistics to the user every given MS, 0 disables reporting
.br
max_sleep (int, default: 1000):          set max sleep in milliseconds. A negative value -N means to always sleep for N ms, a positive value N means to sleep at most N ms but will sleep less if frame duration is shorter
.br
rtcpsync (boolean, default: true):       use RTCP to adjust synchronization
.br

.br
.SH fout
.LP
.br
Description: File output
.br

.br
The file output filter can work as a null sink when its destination is "null", dropping all input packets. In this case it accepts ANY type of input pid, not just file ones.
.br
In regular mode, the filter will dump to file incomming packets (stream type file), starting a new file for each packet having a frame_start flag set, unless operating in -cat mode.
.br
The ouput file name can use gpac templating mechanism, see gpac help.
.br

.br
.SH Options (expert):
.LP
.br
dst (string, no default):                location of destination file - see filter help 
.br
append (boolean, default: false):        open in append mode
.br
dynext (boolean, default: false):        indicate the file extension is set by filter chain, not dst
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
speed (number, default: 1.0):            set playback speed when vsync is on. If speed is negative and start is 0, start is set to -1
.br
ext (string, no default):                set extension for graph resolution, regardless of file extension
.br
cat (boolean, default: false):           cat each file of input pid rather than creating one file per filename
.br
ow (boolean, default: true):             overwrite output if existing
.br

.br
.SH uflatm
.LP
.br
Description: Raw AAC to LATM writer
.br

.br
This filter converts AAC streams into LATM encapsulated data.
.br

.br
.SH Options (expert):
.LP
.br
fdsi (fraction, default: 0):             set delay between two LATM Audio Config
.br

.br
.SH ufadts
.LP
.br
Description: ADTS writer
.br

.br
This filter converts AAC streams into ADTS encapsulated data.
.br

.br
.SH Options (expert):
.LP
.br
mpeg2 (enum, default: auto):             signal as MPEG2 AAC
.br
* auto: selects based on AAC profile
.br
* no: always signals as MPEG-4 AAC
.br
* yes: always signals as MPEG-2 AAC
.br

.br

.br
.SH reframer
.LP
.br
Description: Media Reframer
.br

.br
Passthrough filter ensuring reframing, and optionnally decoding, of inputs
.br
This filter forces input pids to be properly framed (1 packet = 1 Access Unit). It is mostly used for file to file operations.
.br
The filter can be used to filter out packets based on SAP types, for example to extract only the key frames (SAP 1,2,3) of a video
.br
The filter can be used to add real-time regulation of input packets. For example to simulate a live DASH:
.br
Example
.br
"src=m.mp4 reframer:rt=on dst=live.mpd:dynamic"
.br

.br

.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br
rt (enum, default: off):                 real-time regulation mode of input
.br
* off: disables real-time regulation
.br
* on: enables real-time regulation, one clock per pid
.br
* sync: enables real-time regulation one clock for all pids
.br

.br
saps (uint list, no default, minmax: 0|1|2|3|4): drop non-SAP packets, off by default. The string contains the list (whitespace or comma-separated) of SAP types (0,1,2,3,4) to forward. Note that forwarding only sap 0 will break the decoding
.br

.br
refs (boolean, default: false):          forward only frames used as reference frames, if indicated in the input stream
.br
speed (number, default: 1.0):            speed for real-time regulation mode - only positive value
.br
raw (boolean, default: false):           force input streams to be in raw format (i.e. forces decoding of input)
.br

.br
.SH writegen
.LP
.br
Description: Stream to file
.br

.br
Generic single stream to file converter, used when extracting/converting PIDs.
.br
The writegen filter should usually not be explicetly loaded without a source ID specified, since the filter would likely match any pid connection.
.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br
pfmt (pixel format, default: none, minmax: none,yuv420,yuv420_10,yuv422,yuv422_10,yuv444,yuv444_10,uyvy,vyuy,yuyv,yvyu,nv12,nv21,nv1l,nv2l,yuva,yuvd,grey,algr,gral,rgb4,rgb5,rgb6,rgba,argb,bgra,abgr,rgb,bgr,xrgb,rgbx,xbgr,bgrx,rgbd,rgbds,rgbs,rgbas): pixel format for raw extract. If not set, derived from extension
.br
afmt (audio format, default: none, minmax: none,u8,s16,s24,s32,flt,dbl,u8p,s16p,s24p,s32p,fltp,dblp): audio format for raw extract. If not set, derived from extension
.br
decinfo (enum, default: auto):           decoder config insert mode
.br
* no: never inserted
.br
* first: inserted on first packet
.br
* sap: inserted at each SAP
.br
* auto: selects between no and first based on media type
.br

.br
split (boolean, default: false):         force one file per decoded frame.
.br
frame (boolean, default: false):         force single frame dump with no rewrite. In this mode, all codecids are supported
.br
sstart (unsigned int, default: 0):       start number of frame to dump. If 0, all samples are dumped
.br
send (unsigned int, default: 0):         end number of frame to dump. If start<end, all samples after start are dumped
.br

.br
.SH ufnalu
.LP
.br
Description: AVC/HEVC to AnnexB writer
.br

.br
This filter converts AVC|H264 and HEVC streams into AnnexB format, with inband parameter sets and start codes.
.br

.br
.SH Options (expert):
.LP
.br
rcfg (boolean, default: true):           force repeating decoder config at each I-frame
.br
extract (enum, default: all):            layer extraction mode
.br
* full: extracts all layers
.br
* base: extract base layer only
.br
* layer: extract non-base layer(s) only
.br

.br
delim (boolean, default: true):          insert AU Delimiter NAL
.br

.br
.SH writeqcp
.LP
.br
Description: QCP writer
.br

.br
This filter converts a single stream to a QCP output file.
.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br

.br
.SH writevtt
.LP
.br
Description: WebVTT writer
.br

.br
This filter converts a single stream to a WebVTT output file.
.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br
merge (boolean, default: false):         merge VTT cue if needed
.br

.br
.SH nhntw
.LP
.br
Description: NHNT writer
.br

.br
This filter converts a single stream to an NHNT output file.
.br
NHNT documentation is available at https://github.com/gpac/gpac/wiki/NHNT-Format
.br

.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br
large (boolean, default: false):         use large file mode
.br

.br
.SH nhmlw
.LP
.br
Description: NHML writer
.br

.br
This filter converts a single stream to an NHML output file.
.br
NHML documentation is available at https://github.com/gpac/gpac/wiki/NHML-Format
.br

.br

.br
.SH Options (expert):
.LP
.br
exporter (boolean, default: false):      compatibility with old exporter, displays export results
.br
dims (boolean, default: false):          use DIMS mode
.br
name (string, default: dump.nhml):       set output name of files produced (needed media/info files refered to from XML
.br
nhmlonly (boolean, default: false):      only dump NHML info, not media
.br
full (boolean, default: false):          full NHML dump
.br
chksum (enum, default: none):            insert frame checksum
.br
* none: no checksum
.br
* crc: CRC32 checksum
.br
* sha1: SHA1 checksum
.br

.br

.br
.SH vobsubdmx
.LP
.br
Description: VobSub demuxer
.br

.br
This filter demultiplexes VobSub files/data to produce media PIDs and frames.
.br

.br
.SH Options (expert):
.LP
.br
blankframe (boolean, default: true):     force inserting a blank frame if first subpic is not at 0
.br

.br
.SH avimx
.LP
.br
Description: AVI muxer
.br

.br
This filter multiplexes raw or compressed audio and video to produce an AVI output.
.br

.br
.SH Options (expert):
.LP
.br
dst (string, no default):                location of destination file
.br
fps (fraction, default: 25/1):           default framerate if none indicated in stream
.br
noraw (boolean, default: false):         disable raw output in AVI, only compressed ones allowed
.br

.br
.SH aout
.LP
.br
Description: Audio output
.br

.br
This filter outputs a single uncompressed audio PID to a soundcard.
.br

.br
.SH Options (expert):
.LP
.br
drv (string, no default):                audio driver name
.br
bnum (unsigned int, default: 2):         number of audio buffers - 0 for auto
.br
bdur (unsigned int, default: 100):       total duration of all buffers in ms - 0 for auto. The longer the audio buffer is, the longer the audio latency will be (pause/resume). The quality of fast forward audio playback will also be degradated when using large audio buffers
.br
threaded (boolean, default: true):       force dedicated thread creation if sound card driver is not threaded
.br
dur (fraction, default: 0):              only play the specified duration
.br
clock (boolean, default: true):          hint audio clock for this stream (reports system time and CTS), for other filters to use
.br
speed (number, default: 1.0):            set playback speed. If speed is negative and start is 0, start is set to -1
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
vol (unsigned int, default: 100, minmax: 0-100, updatable): set default audio volume, as a percentage between 0 and 100
.br
pan (unsigned int, default: 50, minmax: 0-100, updatable): set stereo pan, as a percentage between 0 and 100, 50 being centered
.br
buffer (unsigned int, default: 100):     set buffer in ms
.br

.br
.SH ufm4v
.LP
.br
Description: M4V writer
.br

.br
This filter converts MPEG-4 part 2 visual streams into dumpable format (reinsert decoder config).
.br

.br
.SH Options (expert):
.LP
.br
rcfg (boolean, default: true):           force repeating decoder config at each I-frame
.br

.br
.SH resample
.LP
.br
Description: Audio resampler
.br

.br
This filter resamples raw audio to a target sample rate, number of channels or audio format.
.br

.br
.SH Options (expert):
.LP
.br
ch (unsigned int, default: 0):           desired number of output audio channels - 0 for auto
.br
sr (unsigned int, default: 0):           desired sample rate of output audio - 0 for auto
.br
fmt (audio format, default: none):       desired format of output audio - none for auto
.br

.br
.SH vout
.LP
.br
Description: Video output
.br

.br
This filter displays a single visual pid in a window.
.br
The window is created unless a window handle (HWND, xWindow, etc) is indicated in the config file ( [Temp]OSWnd=ptr).
.br
The output uses GPAC video output module indicated in -drv option or in the config file (see GPAC core help).
.br
The video output module can be further configured (see GPAC core help).
.br
The filter can use openGL or 2D blitter of the graphics card, depending on the OS support.
.br
The filter can be used do dump frames as written on the grapics card.
.br
In this case, the window is not visible and only the listed frames are drawn to the GPU.
.br
The pixel format of the dumped frame is always RGB in OpenGL and matches the video backbuffer format in 2D mode.
.br

.br

.br
.SH Options (expert):
.LP
.br
drv (string, no default):                video driver name
.br
vsync (boolean, default: true):          enable video screen sync
.br
drop (boolean, default: false):          enable droping late frames
.br
disp (enum, default: gl):                display mode
.br
* gl: OpenGL
.br
* pbo: OpenGL with PBO
.br
* blit: 2D hardware blit
.br
* soft: software blit
.br

.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
dur (fraction, default: 0):              only play the specified duration
.br
speed (number, default: 1.0):            set playback speed when vsync is on. If speed is negative and start is 0, start is set to -1
.br
hold (number, default: 1.0):             number of seconds to hold display for single-frame streams. A negative value force a hold on last frame for single or multi-frames streams
.br
linear (boolean, default: false):        use linear filtering instead of nearest pixel for GL mode
.br
back (unsigned int, default: 0x808080):  back color for transparent images
.br
wsize (vec2d int, default: -1x-1):       default init window size. 0x0 holds the window size of the first frame. Negative values indicate video media size
.br
wpos (vec2d int, default: -1x-1):        default position (0,0 top-left)
.br
delay (fraction, default: 0, updatable): set delay, positive value displays after audio clock
.br
hide (boolean, default: false):          hide output window
.br
fullscreen (boolean, default: false):    use fullcreen
.br
buffer (unsigned int, default: 100):     set buffer in ms
.br
dumpframes (uint list, no default):      ordered list of frames to dump, 1 being first frame - see filter help
.br
out (string, default: dump):             radical of dump frame filenames. If no extension is provided, frames as exported as $OUT_%d.PFMT.
.br

.br
.SH vcrop
.LP
.br
Description: Video crop
.br

.br
This filter is used to crop raw video data.
.br

.br
.SH Options (expert):
.LP
.br
wnd (string, no default):                size of output to crop, indicated as TxLxWxH. If % is indicated after a number, the value is in percent of the source width (for L and W) or height (for T and H). An absolute offset (+x, -x) can be added after percent
.br
copy (boolean, default: false):          copy the source pixels. By default the filter will try to forward crop frames by adjusting offsets and strides of the source if possible (window contained in frame)
.br
round (enum, default: up):               adjust dimension to be a multiple of 2.
.br
* up: up rounding
.br
* down: down rounding
.br
* allup: up rounding on formats that do not require it (RGB, YUV444)
.br
* alldown: down rounding on formats that do not require it (RGB, YUV444)
.br

.br

.br
.SH vflip
.LP
.br
Description: Video flip
.br

.br
Filter used to flip video frames vertically, horizontally, in both directions or no flip
.br

.br
.SH Options (expert):
.LP
.br
mode (enum, default: vert, updatable):   flip mode
.br
* off: no flipping (passthrough)
.br
* vert: vertical flip
.br
* horiz: horizontal flip
.br
* both: horizontal and vertical flip
.br

.br

.br
.SH rfrawvid
.LP
.br
Description: RAW video reframer
.br

.br
This filter parses raw YUV and RGB files/data and outputs corresponding raw video PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
size (vec2d int, default: 0x0):          source video resolution
.br
spfmt (pixel format, default: none, minmax: none,yuv420,yuv420_10,yuv422,yuv422_10,yuv444,yuv444_10,uyvy,vyuy,yuyv,yvyu,nv12,nv21,nv1l,nv2l,yuva,yuvd,grey,algr,gral,rgb4,rgb5,rgb6,rgba,argb,bgra,abgr,rgb,bgr,xrgb,rgbx,xbgr,bgrx,rgbd,rgbds,rgbs,rgbas): source pixel format. When not set, derived from file extension
.br
fps (fraction, default: 25/1):           number of frames per second
.br
copy (boolean, default: false):          copy source bytes into output frame. If not set, source bytes are referenced only
.br

.br
.SH rfpcm
.LP
.br
Description: PCM reframer
.br

.br
This filter parses raw PCM file/data and outputs corresponding raw audio PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
sr (unsigned int, default: 44100):       sample rate
.br
safmt (audio format, default: none, minmax: none,u8,s16,s24,s32,flt,dbl,u8p,s16p,s24p,s32p,fltp,dblp): audio format
.br
ch (unsigned int, default: 2):           number of channels
.br
framelen (unsigned int, default: 1024):  number of samples to put in one audio frame. For planar formats, indicate plane size in samples
.br

.br
.SH jpgenc
.LP
.br
Description: JPG encoder
.br

.br
This filter encodes a single uncompressed video PID to JPEG using libjpeg.
.br

.br
.SH Options (expert):
.LP
.br
dctmode (enum, default: fast):           type of DCT used
.br
* slow: precise but slow integer DCT
.br
* fast: less precise but faster integer DCT
.br
* float: float DCT
.br

.br
quality (unsigned int, default: 100, minmax: 0-100, updatable): compression quality
.br

.br
.SH pngenc
.LP
.br
Description: PNG encoder
.br

.br
This filter encodes a single uncompressed video PID to PNG using libpng.
.br

.br
No options
.br

.br
.SH rewind
.LP
.br
Description: Audio/Video rewinder
.br

.br
This filter reverses audio and video frames in negative playback spped.
.br
The filter is in passthrough if speed is positive. Otherwise, it reverts decoded GOPs for video, or revert samples in decoded frame for audio (not really nice for most codecs).
.br

.br
.SH Options (expert):
.LP
.br
rbuffer (unsigned int, default: 100):    size of video rewind buffer in frames. If more frames than this, flush is performed
.br

.br
.SH flist
.LP
.br
Description: Sources concatenator
.br

.br
This filter can be used to play playlist files (extension txt or m3u) or a list of sources using flist:l="f1[,f2]", where f1 can be a file or a directory to enum.
.br
Syntax for directory is:
.br
* dir/*: enumerates everything in dir
.br
* foo/*.png: enumerates all files with extension png in foo
.br
* foo/*.png;*.jpg: enumerates all files with extension png or jpg in foo
.br

.br
The filter loads any source supported by GPAC, files (remote or local) or other.
.br
The filter forces input demultiplex (no streamtype FILE) and recomputes the input timestamps into a continuous timeline.
.br
At each new source, the filter tries to remap input PIDs to already declared output PIDs of the same type, if any, or declares new output PIDs otherwise. If no input PID matches the type of an output, no packets are send for that PID.
.br

.br
When using a playlist, directives can be given in a comment line (starting with '#' before the file name).
.br
The following directives (separated with space or comma) are supported:
.br
* repeat=N: repeats N times the content (hence played N+1)
.br
* start=T: tries to play the file from start time T seconds (double format only)
.br
Warning: This may not work with some files/formats not supporting seeking
.br
* stop=T: stops source playback after T seconds (double format only)
.br
This works on any source (implemented independetly from seek support).
.br

.br
The source lines follow the usual source syntax, see gpac -h.
.br
Additionnal pid properties can be added per source (see gpac -h doc), but are valid only for the current source, and reset at next source.
.br
The playlist file is refreshed whenever the next source has to be reloaded in order to allow for dynamic pushing of sources in the playlist.
.br
If the last URL played cannot be found in the playlist, the first URL in the playlist file will be loaded.
.br

.br

.br
.SH Options (expert):
.LP
.br
loop (boolean, default: false):          continuously loop playlist/list of files - see filter help
.br
srcs (string list, no default):          list of files to play - see filter help
.br
dur (fraction, default: 1/25):           for source files with a single frame, sets frame duration. 0/NaN fraction means reuse source timing which is usually not set!
.br
revert (boolean, default: false):        revert list of files (not playlist)
.br
timescale (unsigned int, default: 0):    force output timescale on all pids. 0 uses the timescale of the first pid found
.br

.br
.SH m2tsmx
.LP
.br
Description: MPEG-2 TS muxer
.br

.br
GPAC TS multiplexer selects M2TS PID for media streams using the PID of the PMT plus the stream index.
.br
For example, default config creates the first program with a PMT PID 100, the first stream will have a PID of 101.
.br
Streams are grouped in programs based on input PID property ServiceID if present. If absent, stream will go in the program with service ID as indicated by -sid option.
.br
-name option is overriden by input PID property ServiceName
.br
-provider option is overriden by input PID property ServiceProvider
.br

.br
.SH Time and External Media Information (TEMI)
.LP
.br
The -temi option allows specifying a list of URLs or timeline IDs to insert in the program.
.br
Only a single TEMI timeline can be specified per PID.
.br
The syntax is a comma-separated list of one or more TEMI description, each of them separated by '#'
.br
Each TEMI description is formated as #ServiceID#ID_OR_URL, with:
.br
* ServiceID: optional, number indicating the target serviceID
.br
* ID_OR_URL: If numbern indicates the TEMI ID to use for external timeline. Otherwise, gives the URL to insert
.br
Each comma-separated description designs a stream index in the target service.
.br
Example
.br
temi="url"
.br

.br
Iinserts a TEMI URL+timecode in the first stream of all programs
.br
Example
.br
temi="url,4"
.br

.br
Inserts a TEMI URL+timecode in the first stream of all programs and an external TEMI with ID 4 in the second stream of all programs
.br
Example
.br
temi="#20#4,#10#URL"
.br

.br
Inserts an external TEMI with ID 4 in the first stream of program with ServiceID 20 and a TEMI URL to the second stream of program with ServiceID 10
.br
Example
.br
temi="#20#4,,#10#URL"
.br

.br
Inserts an external TEMI with ID 4 in the first stream of program with ServiceID 20 and a TEMI URL to the third stream of program with ServiceID 10 (and nothing on second stream)
.br

.br
In DASH mode, the PCR is always initialized at 0, and -flush_rap is automatically set.
.br

.br

.br
.SH Options (expert):
.LP
.br
breq (unsigned int, default: 100):       buffer requirements in ms for input pids
.br
pmt_id (unsigned int, default: 100):     define the ID of the first PMT to use in the mux
.br
rate (unsigned int, default: 0):         target rate in bps of the multiplex. If not set, variable rate is used
.br
pmt_rate (unsigned int, default: 200):   interval between PMT in ms
.br
pat_rate (unsigned int, default: 200):   interval between PAT in ms
.br
pcr_offset (unsigned int, default: -1):  offset all timestamps from PCR by V, in 90kHz. Default value is computed based on input media
.br
mpeg4 (enum, default: none):             force usage of MPEG-4 signaling (IOD and SL Config).
.br
* none: disables 4on2
.br
* full: sends AUs as SL packets over section for OD, section/pes for scene (cf bifs_pes)
.br
* scene: sends only scene streams as 4on2 but uses regular PES without SL for audio and video
.br

.br
pmt_version (unsigned int, default: 200): set version number of the PMT
.br
disc (boolean, default: false):          set the discontinuity marker for the first packet of each stream
.br
repeat_rate (unsigned int, default: 0):  interval in ms between two carousel send for MPEG-4 systems. Is overriden by carousel duration PID property if defined
.br
repeat_img (unsigned int, default: 0):   interval in ms between resending (as PES) of single-image streams. If 0, image data is sent once only
.br
max_pcr (unsigned int, default: 100):    set max interval in ms between 2 PCR
.br
nb_pack (unsigned int, default: 4):      pack N TS packets in output packets
.br
pes_pack (enum, default: audio):         set AU to PES packing mode.
.br
* audio: will pack only multiple audio AUs in a PES
.br
* none: make exactly one AU per PES
.br
* all: will pack multiple AUs per PES for all streams
.br

.br
rt (boolean, default: false):            use real-time output
.br
bifs_pes (enum, default: off):           select BIFS streams packetization (PES vs sections)
.br
* on: uses BIFS PES
.br
* off: uses BIFS sections
.br
* copy: uses BIFS PES but removes timestamps in BIFS SL and only carries PES timestamps
.br

.br
flush_rap (boolean, default: false):     force flushing mux program when RAP is found on video, and injects PAT and PMT before the next video PES begin
.br
pcr_only (boolean, default: false):      enable PCR-only TS packets
.br
pcr_init (long int, default: -1):        set initial PCR value for the programs. Negative value implies random value is picked
.br
sid (unsigned int, default: 0):          set service ID for the program - see filter help
.br
name (string, no default):               set service name for the program - see filter help
.br
provider (string, no default):           set service provider name for the program - see filter help
.br
sdt_rate (unsigned int, default: 0):     interval in ms between two DVB SDT tables. If 0, SDT is disabled
.br
temi (string, no default):               insert TEMI time codes in adaptation field - see filter help
.br
temi_delay (unsigned int, default: 1000): set delay in ms between two TEMI url descriptors
.br
temi_offset (unsigned int, default: 0):  set offset in ms  to add to TEMI timecodes
.br
temi_ntp (boolean, default: false):      insert NTP timestamp in TEMI timeline descriptor
.br
log_freq (unsigned int, default: 500):   delay between logs for realtime mux
.br
latm (boolean, default: false):          use LATM AAC encapsulation instead of regular ADTS
.br
subs_sidx (int, default: -1):            number of subsegments per sidx. negative value disables sidx
.br

.br
.SH dasher
.LP
.br
Description: DASH and HLS segmenter
.br

.br
.SH GPAC DASH and HLS segmenter
.LP
.br
.P
.B
Template strings
.br
The segmenter uses templates to derive output file names, regardless of the DASH mode (even when templates are not used). The default one is $File$_dash for ondemand and single file modes, and $File$_$Number$ for seperate segment files
.br
Example
.br
template=Great_$File$_$Width$_$Number$
.br

.br
If input is foo.mp4 with 640x360 video, this will resolve in Great_foo_640_$Number$ for the DASH template
.br
Example
.br
template=Great_$File$_$Width$
.br

.br
If input is foo.mp4 with 640x360 video, this will resolve in Great_foo_640.mp4 for onDemand case
.br

.br
Standard DASH replacement strings
.br
* $Number[%%0Nd]$: replaced by the segment number, possibly prefixed with 0
.br
* $RepresentationID$: replaced by representation name
.br
* $Time$: replaced by segment start time
.br
* $Bandwidth$: replaced by representation bandwidth.
.br

.br
Additionnal replacement strings (not DASH, not generic GPAC replacements but may occur multiple times in template):
.br
* $Init=NAME$: replaced by NAME for init segment, ignored otherwise
.br
* $Index=NAME$: replaced by NAME for index segments, ignored otherwise
.br
* $Path=PATH$: replaced by PATH when creating segments, ignored otherwise
.br
* $Segment=NAME$: replaced by NAME for media segments, ignored for init segments
.br
* $DS$ (Dash Suffix): replaced by "_trackN" in case the input is an AV multiplex, or kept empty otherwise
.br

.br
.P
.B
PID assignment
.br
To assign PIDs into periods and adaptation sets and configure the session, the dasher looks for the following properties on each input pid:
.br
* Representation: assigns representation ID to input pid. If not set, the default behaviour is to have each media component in different adaptation sets. Setting the RepresentationID allows explicit multiplexing of the source(s)
.br
* Period: assigns period ID to input pid. If not set, the default behaviour is to have all media in the same period with the same start time
.br
* PStart: assigns period start. If not set, 0 is assumed, and periods appear in the Period ID declaration order. If negative, this gives the period order (-1 first, then -2 ...). If positive, this gives the true start time and will abort DASHing at period end
.br
Note: When both positive and negative values are found, the by-order periods (negative) will be inserted AFTER the timed period (positive)
.br
* ASID: assigns parent adaptation set ID. If not 0, only sources with same AS ID will be in the same adaptation set
.br
Note: If multiple streams in source, only the first stream will have an AS ID assigned
.br
* xlink: for remote periods, only checked for null pid
.br
* Role, PDesc, ASDesc, ASCDesc, RDesc: various descriptors to set for period, AS or representation
.br
* BUrl: overrides dasher [-base] with a set of BaseURLs to use for the pid (per representation)
.br
* Template: overrides dasher -template for this PID
.br
* DashDur: overrides dasher segment duration for this PID
.br
* StartNumber: sets the start number for the first segment in the PID, default is 1
.br
* Non-dash properties: Bitrate, SAR, Language, Width, Height, SampleRate, NumChannels, Language, ID, DependencyID, FPS, Interlaced. These properties are used to setup each representation and can be overriden on input PIDs using the general PID property settings (cf global help).
.br
Example
.br
src=test.mp4:#Bitrate=1M dst=test.mpd
.br

.br
This will force declaring a bitrate of 1M for the representation, regardless of actual input bitrate
.br
Example
.br
src=muxav.mp4 dst=test.mpd
.br

.br
This will create unmuxed DASH segments
.br
Example
.br
src=muxav.mp4:#Representation=1 dst=test.mpd
.br

.br
This will create muxed DASH segments
.br
Example
.br
src=m1.mp4 src=m2.mp4:#Period=Yep dst=test.mpd
.br

.br
This will put src m1.mp4 in first period, m2.mp4 in second period
.br
Example
.br
src=m1.mp4:#BUrl=http://foo/bar dst=test.mpd
.br

.br
This will assign a baseURL to src m1.mp4
.br
Example
.br
src=m1.mp4:#ASCDesc=<ElemName val="attval">text</ElemName> dst=test.mpd
.br

.br
This will assign the specified XML descriptor to the adaptation set.
.br
Note:  this can be used to inject most DASH descriptors not natively handled by the dasher. The dasher handles the XML descriptor as a string and does not attempt to validate it. Descriptors, as well as some dasher filter arguments, are string lists (comma-separated by default), so that multiple descriptors can be added:
.br
Example
.br
src=m1.mp4:#RDesc=<Elem attribute="1"/>,<Elem2>text</Elem2> dst=test.mpd
.br

.br
This will insert two descriptors in the representation(s) of m1.mp4
.br
Example
.br
src=video.mp4:#Template=foo$Number$ src=audio.mp4:#Template=bar$Number$ dst=test.mpd
.br

.br
This will assign different templates to the audio and video sources.
.br
Example
.br
src=null:#xlink=http://foo/bar.xml:#PDur=4 src=m.mp4:#PStart=-1
.br

.br
This will insert an create an MPD with first a remote period then a regular one
.br
Example
.br
src=null:#xlink=http://foo/bar.xml:#PStart=6 src=m.mp4
.br

.br
This will insert an create an MPD with first a regular period, dashing ony 6s of content, then a remote one
.br

.br
The dasher will request muxing filter chains for each representation and will reassign PID IDs
.br
so that each media component (video, audio, ...) in an adaptation set has the same ID
.br

.br
For HLS, the output pid will deliver the master playlist and the variant playlists
.br
The default variant playlist are $NAME_$N.m3u8, where $NAME is the radical of the output file name and $N is the 1-based index of the variant
.br

.br
.P
.B
Cue-driven segmentation
.br
The segmenter can take a list of instructions, or Cues, to use for the segmentation process, in which case only these are used to derive segment boundaries.
.br
Cues are given in an XML file with a root element called <DASHCues>, with currently no attribute specified. The children are <Stream> elements, with attributes:
.br
* id: integer for stream/track/pid ID
.br
- timescale:integer giving the units of following timestamps
.br
* mode: if present and value is "edit", the timestamp are in presentation time (edit list applied). Otherwise they are in media time
.br
The children of <Stream> are <Cue> elements, with attributes:
.br
* sample: integer giving the sample/frame number of a sample at which spliting shall happen
.br
* dts: long integer giving the decoding time stamp of a sample at which spliting shall happen
.br
* cts: long integer giving the composition / presentation time stamp of a sample at which spliting shall happen
.br
Warning: Cues shall be listed in decoding order. Cue files can be specified for the entire dasher, or per PID using DashCue property.
.br

.br
.P
.B
Muxer development considerations
.br
Output muxers allowing segmented output must obey the following:
.br
- add a "DashMode" capability to their input caps (value of the cap is ignored, only its presence is required)
.br
- inspect packet properties
.br
 * FileNumber: gives the signal of a new DASH segment
.br
 * FileName: gives the optional file name (if not present, output shall be a single file). It is only set for packet carrying the "FileNumber" property, and only on one PID (usually the first) for multiplexed outputs
.br
 * IDXName: gives the optional index name (if not present, index shall be in the same file as dash segment). Only used for MPEG-2 TS for now
.br
 * EODS: property is set on packets with no DATA, no TS to signal the end of a DASH segment. This is only used when stoping/resuming the segmentation process, in order to flush segments without dispatching an EOS (see -subdur )
.br
- for each segment done, send a downstream event on the first connected PID signaling the size of the segment and the size of its index if any
.br
- for muxers with init data, send a downstream event signaling the size of the init and the size of the global index if any
.br
- the following filter options are passed to muxers, which should declare them as arguments:
.br
 * noinit: disables output of init segment for the muxer (used to handle bitstream switching with single init in DASH)
.br
 * frag: indicates muxer shall used fragmented format (used for ISOBMFF mostly)
.br
 * subs_sidx=0: indicates an SIDX shall be generated - only added if not already specified by user
.br
 * xps_inband=all|no: indicates AVC/HEVC/... parameter sets shall be sent inband or out of band
.br
 * nofragdef: indicates fragment defaults should be set in each segment rather than in init segment
.br

.br
The dasher will add the following properties to the output PIDs:
.br
* DashMode: identifies VoD (single file with global index) or regular DASH mode used by dasher
.br
* DashDur: identifies target DASH segment duration - this can be used to estimate the SIDX size for example
.br

.br

.br
.SH Options (expert):
.LP
.br
dur (number, default: 1.0):              target segment duration in seconds
.br
tpl (boolean, default: true):            use template mode (multiple segment, template URLs)
.br
stl (boolean, default: false):           use segment timeline (ignored in on_demand mode)
.br
dmode (enum, default: static, updatable): dash content mode
.br
* static: static content
.br
* dynamic: live generation
.br
* dynlast: last call for live, will turn the MPD into static
.br

.br
sseg (boolean, default: false):          single segment is used
.br
sfile (boolean, default: false):         use a single file for all segments (default in on_demand)
.br
align (boolean, default: true):          enable segment time alignment between representations
.br
sap (boolean, default: true):            enable spliting segments at SAP boundaries
.br
mix_codecs (boolean, default: false):    enable mixing different codecs in an adaptation set
.br
ntp (enum, default: rem):                insert/override NTP clock at the begining of each segment
.br
* rem: removes NTP from all input packets
.br
* yes: inserts NTP at each segment start
.br
* keep: leaves input packet NTP untouched.
.br

.br
no_sar (boolean, default: false):        do not check for identical sample aspect ratio for adaptation sets
.br
m2ts (boolean, default: false):          generate MPEG-2 TS output
.br
forcep (boolean, default: false):        force profile string for avc/hevc/aac
.br
bs_switch (enum, default: def):          bitstream switching mode (single init segment)
.br
* def: resolves to off for onDemand and inband for live
.br
* off: disables BS switching
.br
* on: enables it if same decoder configuration is possible
.br
* inband: moves decoder config inband if possible
.br
* force: enables it even if only one representation
.br
* multi: uses multiple stsd entries in ISOBMFF
.br

.br
avcp (string, no default):               profile to use for AVC|H264 if no profile could be found. If forcep is set, enforces this profile
.br
hvcp (string, no default):               profile to use for HEVC if no profile could be found. If forcep is set, enforces this profile
.br
aacp (string, no default):               profile to use for AAC if no profile could be found. If forcep is set, enforces this profile
.br
av1p (string, no default):               profile to use for AV1 if no profile could be found. If forcep is set, enforces this profile
.br
vpxp (string, no default):               profile to use for VP8/9 if no profile could be found. If forcep is set, enforces this profile
.br
template (string, no default):           template string to use to generate segment name - see filter help
.br
segext (string, default: m4s):           file extension to use for segments
.br
asto (unsigned int, default: 0):         availabilityStartTimeOffset to use. A negative value simply increases the AST, a positive value sets the ASToffset to representations
.br
profile (enum, default: auto):           target DASH profile. This will set default option values to ensure conformance to the desired profile. For MPEG-2 TS, only main and live are used, others default to main.
.br
* auto: turns profile to live for dynamic and full for non-dynamic
.br
* live: DASH live profile, using segment template
.br
* onDemand: MPEG-DASH live profile
.br
* main: MPEG-DASH main profile, using segment list
.br
* full: MPEG-DASH full profile
.br
* hbbtv1.5.live: HBBTV 1.5 DASH profile
.br
* dashavc264.live: DASH-IF live profile
.br
* dashavc264.onDemand: DASH-IF onDemand profile
.br

.br
profX (string, no default):              list of profile extensions, as used by DASH-IF and DVB. The string will be colon-concatenated with the profile used
.br
cp (enum, default: set):                 content protection element location
.br
* set: in adaptation set element
.br
* rep: in representation element
.br
* both: in both adaptation set and representation elements
.br

.br
pssh (enum, default: v):                 storage mode for PSSH box
.br
* f: stores in movie fragment only
.br
* v: stores in movie only
.br
* m: stores in mpd only
.br
* mf: stores in mpd and movie fragment
.br
* mv: stores in mpd and movie
.br
* n: discard pssh from mpd and segments
.br

.br
buf (int, default: -100):                min buffer duration in ms. negative value means percent of segment duration (eg -150 = 1.5*seg_dur)
.br
timescale (int, default: 0):             set timescale for timeline and segment list/template. A value of 0 picks up the first timescale of the first stream in an adaptation set. A negative value forces using stream timescales for each timed element (multiplication of segment list/template/timelines). A positive value enforces the MPD timescale
.br
check_dur (boolean, default: true):      check duration of sources in period, trying to have roughly equal duration. Enforced whenever period start times are used
.br
skip_seg (boolean, default: false):      increment segment number whenever an empty segment would be produced - NOT DASH COMPLIANT
.br
title (string, no default):              MPD title
.br
source (string, no default):             MPD Source
.br
info (string, no default):               MPD info url
.br
cprt (string, no default):               MPD copyright string
.br
lang (string, no default):               language of MPD Info
.br
location (string list, no default):      set MPD locations to given URL
.br
base (string list, no default):          set base URLs of MPD
.br
refresh (number, default: 0):            refresh rate for dynamic manifests, in seconds. A negative value sets the MPD duration. If 0, uses dash duration
.br
tsb (number, default: 30):               time-shift buffer depth in seconds. A negative value means infinity
.br
subdur (number, default: 0):             maximum duration of the input file to be segmentated. This does not change the segment duration, segmentation stops once segments produced exceeded the duration.
.br
ast (string, no default):                set start date (as xs:date, eg YYYY-MM-DDTHH:MM:SSZ) for live mode. Default is now. !! Do not use with multiple periods, nor when DASH duration is not a multiple of GOP size !!
.br
state (string, no default):              path to file used to store/reload state info when simulating live. This is stored as a valid MPD with GPAC XML extensions
.br
loop (boolean, default: false):          loop sources when dashing with subdur and state. If not set, a new period is created once the sources are over
.br
split (boolean, default: true):          enable cloning samples for text/metadata/scene description streams, marking further clones as redundant
.br
hlsc (boolean, default: false):          insert clock reference in variant playlist in live HLS
.br
cues (string, no default):               set cue file - see filter help
.br
strict_cues (boolean, default: false):   strict mode for cues, complains if spliting is not on SAP type 1/2/3 or if unused cue is found
.br
subs_sidx (int, default: -1):            number of subsegments per sidx. negative value disables sidx. Only used to inherit sidx option of destination
.br
cmpd (boolean, default: false):          skip line feed and spaces in MPD XML for more compacity
.br

.br
.SH tileagg
.LP
.br
Description: HEVC tile aggregator
.br

.br
This filter reaggregates a set of split tiled HEVC streams (hvt1 or hvt2 in isobmff) into a single HEVC stream.
.br

.br
.SH Options (expert):
.LP
.br
tiledrop (uint list, default: , updatable): specify indexes of tiles to drop
.br

.br
.SH pin
.LP
.br
Description: pipe input
.br

.br
This filter handles generic input pipes (mono-directionnal) in blocking or non blocking mode.
.br
Input pipes cannot seek
.br
The associated protocol scheme is pipe:// when loaded as a generic input (eg, -i pipe://URL where URL is a relative or absolute pipe name)
.br
It can be set to run forever (until the session is closed), ignoring any potential pipe close on the writing side
.br
Data format of the pipe should be specified using extension (either in file name or through -ext) or MIME type through -mime.
.br
Note: Unless disabled at session level (see -no-probe ), file extensions are usually ignored and format probing is done on the first data block.
.br

.br
On Windows hosts, the default pipe prefix is "\\.\pipe\gpac\" if no prefix is set 
.br
Example
.br
dst=mypipe resolves in \\.\pipe\gpac\mypipe
.br

.br
Example
.br
dst=\\.\pipe\myapp\mypipe resolves in \\.\pipe\myapp\mypipe
.br

.br
Any destination name starting with \\ is used as is, with \ translated in /
.br

.br
Input pipes are created by default in non-blocking mode
.br

.br
The pipe input can create the pipe if not found using -mkp. On windows hosts, this will create a pipe server.
.br
On non windows hosts, the created pipe will delete the pipe file upon filter destruction
.br

.br
Input pipes can be setup to run forever using -ka. In this case, end of stream will never be triggered
.br
This can be usefull to pipe raw streams from different process into gpac:
.br
Receiver side: gpac -i pipe://mypipe:ext=.264:mkp:ka
.br
Sender side: cat raw1.264 > mypipe && gpac -i raw2.264 -o pipe://mypipe:ext=.264
.br
The pipe input can be created in blocking mode or non-blocking mode. If the filter creates the pipe, blocking mode is always enabled.
.br

.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
block_size (unsigned int, default: 5000): buffer size used to read pipe
.br
ext (string, no default):                indicate file extension of pipe data
.br
mime (string, no default):               indicate mime type of pipe data
.br
blk (boolean, default: false):           open pipe in block mode - see filter help
.br
ka (boolean, default: false):            keep-alive pipe when end of input is detected - see filter help
.br
mkp (boolean, default: false):           create pipe if not found - see filter help
.br

.br
.SH pout
.LP
.br
Description: pipe output
.br

.br
This filter handles generic output pipes (mono-directionnal) in blocking mode only.
.br
Output pipes do not currently support non blocking mode
.br
The assoicated protocol scheme is pipe:// when loaded as a generic output (eg, -o pipe://URL where URL is a relative or absolute pipe name)
.br
Data format of the pipe shall be specified using extension (either in filename or through -ext option) or MIME type through -mime
.br
The pipe name indicated in -dst can use template mechanisms from gpac, e.g. dst=pipe_$ServiceID$
.br

.br
On Windows hosts, the default pipe prefix is "\\.\pipe\gpac\" if no prefix is set 
.br
Example
.br
dst=mypipe resolves in \\.\pipe\gpac\mypipe
.br

.br
Example
.br
dst=\\.\pipe\myapp\mypipe resolves in \\.\pipe\myapp\mypipe
.br

.br
Any destination name starting with \\ is used as is, with \ translated in /
.br

.br
The pipe input can create the pipe if not found using -mkp. On windows hosts, this will create a pipe server.
.br
On non windows hosts, the created pipe will delete the pipe file upon filter destruction
.br

.br
.SH Options (expert):
.LP
.br
dst (string, no default):                location of destination file
.br
ext (string, no default):                indicate file extension of pipe data
.br
mime (string, no default):               indicate mime type of pipe data
.br
dynext (boolean, default: false):        indicate the file extension is set by filter chain, not dst
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
speed (number, default: 1.0):            set playback speed. If speed is negative and start is 0, start is set to -1
.br
mkp (boolean, default: false):           create pipe if not found - see filter help
.br
block_size (unsigned int, default: 5000): buffer size used to write to pipe, windows only
.br

.br
.SH gsfmx
.LP
.br
Description: GSF Muxer
.br

.br
This filter provides GSF (GPAC Super/Simple/Serialized/Stream/State Format) multiplexing.
.br
It serializes the stream states (config/reconfig/info update/remove/eos) and packets of input PIDs. This allows either saving to file a session, or forwarding the state/data of streams to another instance of GPAC using either pipes or sockets. Upstream events are not serialized.
.br

.br
The default behaviour does not insert sequence numbers. When running over general protocols not ensuring packet order, this should be inserted.
.br
The serializer sends tune-in packets (global and per pid) at the requested carousel rate - if 0, no carousel. These packets are marked as redundant so that they can be discarded by output filters if needed
.br

.br
The stream format can be encrypted in AES 128 CBC mode. For all packets, the packet header (header, size, frame size/block offset and optionnal seq num) are in the clear and the followings byte until the last byte of the last multiple of block size (16) fitting in the payload are encrypted.
.br
For data packets, each fragment is encrypted individually to avoid error propagation in case of losses.
.br
For other packets, the entire packet is encrypted before fragmentation (fragments cannot be processed individually).
.br
For header/tunein packets, the first 25 bytes after the header are in the clear (signature,version,IV and pattern).
.br
The -IV is constant to avoid packet overhead, randomly generated if not set and sent in the initial stream header. Pattern mode can be used (cf CENC cbcs) to encrypt K block and leave N blocks in the clear.
.br

.br
The header/tunein packet may get quite big when all pid properties are kept. In order to help reduce its size, the -minp option can be used: this will remove all built-in properties marked as dropable (cf property help) as well as all non built-in properties.
.br
The -skp option may also be used to specify which property to drop:
.br
Example
.br
skp="4CC1,Name2
.br

.br
This will remove properties of type 4CC1 and properties (built-in or not) of name Name2.
.br

.br

.br

.br
.SH Options (expert):
.LP
.br
sigsn (boolean, default: false):         signal packet sequence number after header field and before size field. Sequence number is per PID, encoded on 16 bits. Header packet does not have a SN
.br
sigdur (boolean, default: true):         signal duration
.br
sigbo (boolean, default: false):         signal byte offset
.br
sigdts (boolean, default: true):         signal decoding timestamp
.br
dbg (enum, default: no):                 set debug mode
.br
* no: disable debug
.br
* nodata: force packet size to 0
.br
* nopck: skip packet
.br

.br
key (data, no default):                  encrypt packets using given key - see filter helps
.br
IV (data, no default):                   set IV for encryption - a constant IV is used to keep packet overhead small (cbcs-like)
.br
pattern (fraction, default: 1/0):        set nb crypt / nb_skip block pattern. default is all encrypted
.br
mpck (unsigned int, default: 0):         set max packet size. 0 means no fragmentation (each AU is sent in one packet)
.br
magic (string, no default):              magic string to append in setup packet
.br
skp (string, no default):                comma separated list of pid property names to skip - see filter help
.br
minp (boolean, default: false):          include only the minimum set of properties required for stream processing - see filter help
.br
crate (number, default: 0):              carousel period for tune-in info in seconds - see filter help
.br

.br
.SH gsfdmx
.LP
.br
Description: GSF Demuxer
.br

.br
Theis filter provides GSF (GPAC Super/Simple/Serialized/Stream/State Format) demultiplexing.
.br
It deserializes the stream states (config/reconfig/info update/remove/eos) and packets of input PIDs.
.br
This allows either reading a session saved to file, or receiving the state/data of streams from another instance of GPAC
.br
using either pipes or sockets
.br

.br
The stream format can be encrypted in AES 128 CBC mode, in which case the demux filters must be given a 128 bit key.
.br

.br
.SH Options (expert):
.LP
.br
key (data, no default):                  key for decrypting packets
.br
magic (string, no default):              magic string to check in setup packet
.br
mq (unsigned int, default: 4):           set max packet queue length for loss detection. 0 will flush incomplete packet when a new one starts
.br
pad (unsigned int, default: 0, minmax: 0-255): byte value used to pad lost packets
.br

.br
.SH sockout
.LP
.br
Description: UDP/TCP output
.br

.br
This filter handles generic output sockets (mono-directionnal) in blocking mode only.
.br
The filter can work in server mode, waiting for source connections, or or in client mode, directly connecting.
.br
In server mode, the filter can be instructed to keep running at the end of the stream
.br
In server mode, the default behaviour is to keep input packets when no more clients are connected; this can be adjusted though the -kp option, however there is no realtime regulation of how fast packets are droped.
.br
If your sources are not real time, consider adding a real-time scheduler in the chain (cf reframer filter), or set the send -rate option
.br

.br
UDP sockets are used for destinations URLs formatted as udp://NAME
.br
TCP sockets are used for destinations URLs formatted as tcp://NAME
.br
UDP unix domain sockets are used for destinations URLs formatted as udpu://NAME
.br
TCP unix domain sockets are used for destinations URLs formatted as tcpu://NAME
.br

.br
The socket output can be configured to drop or revert packet order for test purposes.
.br
For both mode, a window size in packets is specified as the drop/revert fraction denominator, and the index of the packet to drop/revert is given as the numerator
.br
If the numerator is 0, a packet is randomly chosen in that window
.br
Example
.br
:pckd=4/10
.br

.br
This drops every 4th packet of each 10 packet window
.br
Example
.br
:pckr=0/100
.br

.br
This reverts the send order of one random packet in each 100 packet window
.br

.br

.br

.br
.SH Options (expert):
.LP
.br
dst (string, no default):                location of destination file
.br
sockbuf (unsigned int, default: 65536):  block size used to read file
.br
port (unsigned int, default: 1234):      default port if not specified
.br
ifce (string, no default):               default multicast interface
.br
ext (string, no default):                file extension of pipe data - see filter help
.br
mime (string, no default):               mime type of pipe data - see filter help
.br
listen (boolean, default: false):        indicate the output socket works in server mode
.br
maxc (unsigned int, default: +I):        max number of concurrent connections
.br
ka (boolean, default: false):            keep socket alive if no more connections
.br
kp (boolean, default: true):             keep packets in queue if no more clients
.br
start (number, default: 0.0):            set playback start offset. Negative value means percent of media dur with -1 <=> dur
.br
speed (number, default: 1.0):            set playback speed. If speed is negative and start is 0, start is set to -1
.br
rate (unsigned int, default: 0):         set send rate in bps, disabled by default (as fast as possible)
.br
pckr (fraction, default: 0/0):           reverse packet every N - see filter help
.br
pckd (fraction, default: 0/0):           drop packet every N - see filter help
.br

.br
.SH rfav1
.LP
.br
Description: AV1/IVF/VP9 reframer
.br

.br
This filter parses AV1 OBU, AV1 AnnexB or IVF with AV1 or VP9 files/data and outputs corresponding visual PID and frames.
.br

.br
.SH Options (expert):
.LP
.br
fps (fraction, default: 25000/1000):     import frame rate
.br
autofps (boolean, default: true):        detect FPS from bitstream, fallback to -fps option if not possible
.br
index (number, default: -1.0):           indexing window length. If 0, bitstream is not probed for duration. A negative value skips the indexing if the source file is larger than 100M (slows down importers) unless a play with start range > 0 is issued, otherwise uses the positive value
.br
importer (boolean, default: false):      compatibility with old importer
.br
deps (boolean, default: false):          import samples dependencies information
.br

.br
.SH ufobu
.LP
.br
Description: IVF/OBU/annexB writer
.br

.br
This filter is used to rewrite AV1 OBU bitstream into IVF, annex B or OBU sequence, reinserting the temporal delimiter OBU.
.br

.br
.SH Options (expert):
.LP
.br
rcfg (boolean, default: true):           force repeating decoder config at each I-frame
.br

.br
.SH atscin
.LP
.br
Description: ATSC input
.br

.br
This filter is a receiver for ATSC 3.0 ROUTE sessions. Source is identified using the string atsc://.
.br
The default behaviour is to populate GPAC HTTP Cache with the recieved files, using "http://gpatsc/serviceN/" as service root, N being the ATSC service ID.
.br
In -cache mode, repeated files are always send.
.br
The cached MPD is assigned the following headers:
.br
* x-dash-atsc: integer value, indicates the ATSC service ID
.br
* x-dash-first-seg: string value, indicates the name of the first segment completely retrieved from the broadcast
.br
* x-atsc-loop: boolean value, if yes indicates a loop in the service has been detected
.br
The cached files are assigned the following headers:
.br
* x-atsc: bollean value, if yes indicates the file comes from an ATSC session
.br

.br
This behaviour can be changed by disabling the cache, in which case the filter will output files on a single output pid of type "file". The files are dispatched once fully received, the output pid carries a sequence of complete files. Repeated files are not repeated unless requested.
.br
If needed, one pid per TSI can be used rather than a single pid. This avoids mixing files of different mime types on the same pid (e.g. mpd and isobmff).
.br

.br
On OSX with VM packet replay you will need to force multicast routing, eg: "route add -net 239.255.1.4/32 -interface vboxnet0"
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content - see filter help
.br
ifce (string, no default):               default interface to use for multicast. If NULL, the default system interface will be used
.br
cache (boolean, default: true):          indicate the files should populate GPAC HTTP cache - see filter help
.br
tunein (int, default: -2):               service ID to bootstrap on. 0 means tune to no service, -1 tune all services -2 means tune on first service found
.br
buffer (unsigned int, default: 0x80000): receive buffer size to use in bytes
.br
timeout (unsigned int, default: 5000):   timeout in ms after which tunein fails
.br
kc (boolean, default: false):            keep corrupted file
.br
sr (boolean, default: true):             skip repeated files - ignored in -cache mode
.br
stsi (boolean, default: false):          define one output pid per tsi/serviceID - ignored in -cache mode, see filter help
.br

.br
.SH rtpout
.LP
.br
Description: RTP Streamer
.br

.br
The RTP streamer outputs an SDP on a file pid and streams RTP packets over UDP, starting from the indicated port.
.br
The RTP packets produced have a maximum payload set by the -mtu option (IP packet will be MTU + 40 bytes of IP+UDP+RTP headers).
.br
The real-time scheduling algorithm first initializes the clock by computing the smallest timestamp for all input pids and mapping this media time to the system clock. It then determines the earliest packet to send next on each input pid, adding -delay if any. It finally compares the packet mapped timestamp TS to the system clock SC. When TS - SC is less than -tt, the RTP packets for the source packet are sent.
.br

.br
.SH Options (expert):
.LP
.br
ip (string, no default):                 destination IP adress (NULL is 127.0.0.1)
.br
port (unsigned int, default: 7000):      port for first stream in session
.br
loop (boolean, default: true):           loop all streams in session (not always possible depending on source type)
.br
mpeg4 (boolean, default: false):         send all streams using MPEG-4 generic payload format if posible
.br
mtu (unsigned int, default: 1460):       size of RTP MTU in bytes
.br
ttl (unsigned int, default: 2):          time-to-live for muticast packets
.br
ifce (string, no default):               default network inteface to use
.br
payt (unsigned int, default: 96, minmax: 96-127): payload type to use for dynamic configs.
.br
delay (int, default: 0):                 send delay for packet (negative means send earlier)
.br
tt (unsigned int, default: 1000):        time tolerance in microseconds. Whenever schedule time minus realtime is below this value, the packet is sent right away
.br
runfor (int, default: -1):               run for the given time in ms. Negative value means run for ever (if loop) or source duration, 0 only outputs the sdp
.br
tso (int, default: -1):                  set timestamp offset in microsecs. Negative value means random initial timestamp
.br
xps (boolean, default: false):           force parameter set injection at each SAP. If not set, only inject if different from SDP ones
.br
latm (boolean, default: false):          use latm for AAC payload format
.br

.br
.SH rtspout
.LP
.br
Description: RTSP Server
.br

.br
The RTSP server partially implements RTSP 1.0, with support for OPTIONS, DESCRIBE, SETUP, PLAY, PAUSE and TEARDOWN.
.br
Multiple PLAY ranges are not supported, PLAY range end is not supported, PAUSE range is not supported.
.br
Only aggregated control is supported for PLAY and PAUSE, PAUSE/PLAY on single stream is not supported.
.br
The server only runs on TCP, and handles request in sequence (will not probe for commands until previous response was sent).
.br
The server supports both RTP over UDP delivery and RTP interleaved over RTSP delivery.
.br

.br
The filter can work as a simple output filter by specifying the -dst option:
.br
Example
.br
gpac -i source -o rtsp://myip/sessionname
.br

.br
Example
.br
gpac -i source dst=rtsp://myip/sessionname
.br

.br
In this mode, only one session is possible. It is possible to -loop the input source(s).
.br

.br
The filter can work as a regular RTSP server by specifying the -mounts option to indicate paths of media file to be served:
.br
Example
.br
gpac rtspout:mounts=mydir1,mydir2
.br

.br
In server mode, it is possible to load any source supported by gpac by setting the option -dynurl.
.br
The expected syntax of the dynamic RTSP URLs is rtsp://servername/?URL1[&URLN] or rtsp://servername/@URL1[@URLN] 
.br
Each URL can be absolute or local, in which case it is resolved against the mount point(s).
.br
Example
.br
gpac -i rtsp://localhost/?pipe://mynamepipe&myfile.mp4 [dst filters]
.br

.br
The server will resolve this URL in a new session containing streams from myfile.mp4 and streams from pipe mynamepipe.
.br
When setting -runfor in server mode, the server will exit at the end of the last session being closed.
.br

.br
In both modes, clients can setup multicast if the -mcast option is on or mirror.
.br
When -mcast is set to mirror mode, any DESCRIBE command on a resource already delivered through a multicast session will use that multicast.
.br
Consequently, only DESCRIBE methods are processed for such sessions, other methods will return Unauthorized.
.br

.br
The scheduling algorithm and RTP options are the same as the RTP output filter, see gpac -h rtpout
.br

.br

.br
.SH Options (expert):
.LP
.br
dst (string, no default):                location of destination file - see filter help 
.br
port (unsigned int, default: 554):       server port
.br
firstport (unsigned int, default: 6000): port for first stream in session
.br
mtu (unsigned int, default: 1460):       size of RTP MTU in bytes
.br
ttl (unsigned int, default: 0):          time-to-live for muticast packets. A value of 0 uses client requested TTL, or 1
.br
ifce (string, no default):               default network inteface to use
.br
payt (unsigned int, default: 96, minmax: 96-127): payload type to use for dynamic configs.
.br
mpeg4 (boolean, default: false):         send all streams using MPEG-4 generic payload format if posible
.br
delay (int, default: 0):                 send delay for packet (negative means send earlier)
.br
tt (unsigned int, default: 1000):        time tolerance in microseconds. Whenever schedule time minus realtime is below this value, the packet is sent right away
.br
runfor (int, default: -1):               run the session for the given time in ms. Negative value means run for ever (if loop) or source duration, 0 only outputs the sdp
.br
tso (int, default: -1):                  set timestamp offset in microsecs. Negative value means random initial timestamp
.br
xps (boolean, default: false):           force parameter set injection at each SAP. If not set, only inject if different from SDP ones
.br
latm (boolean, default: false):          use latm for AAC payload format
.br
mounts (string list, no default):        list of directories to expose in server mode
.br
block_size (unsigned int, default: 4096): block size used to read TCP socket
.br
user_agent (string, default: $GPAC_UA):  user agent string, by default solved from GPAC preferences
.br
close (boolean, default: true):          close RTSP connection after each request, except when RTP over RTSP is used
.br
loop (boolean, default: true):           loop all streams in session (not always possible depending on source type) - see filter help.
.br
dynurl (boolean, default: false):        allow dynamic service assembly - see filter help.
.br
mcast (enum, default: off):              control multicast setup of a session.
.br
* off: clients are never allowed to create a multicast
.br
* on: clients can create multicast sessions
.br
* mirror: clients can create a multicast session. Any later request to the same URL will use that multicast session
.br

.br

.br
.SH hevcsplit
.LP
.br
Description: HEVC tile spliter
.br

.br
This filter splits a motion-constrained tiled HEVC PID into N independent HEVC PIDs.
.br

.br
.SH Options (expert):
.LP
.br

.br
.SH hevcmerge
.LP
.br
Description: HEVC Tile merger
.br

.br
This filter merges a set of HEVC PIDs into a single motion-constrained tiled HEVC PID.
.br
The filter creates a tiling grid with a single row and as many columns as needed.
.br
Positioning of tiles can be automatic (implicit) or explicit.
.br
.P
.B
Implicit Positioning
.br
In implicit positioning, results may vary based on the order of input pids declaration.
.br
In this mode the filter will automatically allocate new columns for tiles with height not a multiple of max CU height.
.br
.P
.B
Explicit Positioning
.br
In explicit positioning, the CropOrigin property on input PIDs is used to setup the tile grid. In this case, tiles shall not overlap in the final output.
.br
If CropOrigin is used, it shall be set on all input sources.
.br
If positive coordinates are used, they specify absolute positionning in pixels of the tiles. The coordinates are automatically adjusted to the next multiple of max CU width and height. If a blank is detected in the layout, an empty column in the tiling grid will be inserted.
.br
If negative coordinates are used, they specify relative positioning (eg 0x-1 indicates to place the tile below the tile 0x0).
.br
In this mode, it is the caller responsability to set coordinates so that all tiles in a column have the same width and only the last row/column uses non-multiple of max CU width/height values. The filter will complain and abort if this is not respected.
.br

.br

.br
.SH Options (expert):
.LP
.br

.br
.SH ffdmx
.LP
.br
Description: FFMPEG demuxer
.br

.br
See FFMPEG documentation (https://ffmpeg.org/documentation.html) for more detailed info on demuxers options
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                location of source content
.br
* (string, no default, meta):            any possible args defined for AVFormatContext and sub-classes. See gpac -hx ffdmx and gpac -hx ffdmx:*
.br

.br
.SH ffdec
.LP
.br
Description: FFMPEG decoder
.br

.br
See FFMPEG documentation (https://ffmpeg.org/documentation.html) for more detailed info on decoder options
.br

.br
.SH Options (expert):
.LP
.br
* (string, no default, meta):            any possible args defined for AVCodecContext and sub-classes. See gpac -hx ffdec and gpac -hx ffdec:*
.br

.br
.SH ffavin
.LP
.br
Description: FFMPEG AV Capture
.br

.br
Typical classes are dshow on windows, avfoundation on OSX, video4linux2 or x11grab on linux
.br

.br
Typical device name can be the webcam name:
.br
FaceTime HD Camera on OSX, device name on windows, /dev/video0 on linux
.br
screen-capture-recorder, see http://screencapturer.sf.net/ on windows
.br
Capture screen 0 on OSX (0=first screen), or screenN for short
.br
X display name (eg :0.0) on linux
.br
See FFMPEG documentation (https://ffmpeg.org/documentation.html) for more detailed info on capture devices options
.br

.br
.SH Options (expert):
.LP
.br
src (string, no default):                url of device, video://, audio:// or av://
.br
fmt (string, no default):                name of device class - see filter help. If not set, defaults to first device class
.br
dev (string, default: 0):                name of device or index of device - see filter help
.br
copy (enum, default: A):                 set copy mode of raw frames
.br
* N: frames are only forwarded (shared memory, no copy)
.br
* A: audio frames are copied, video frames are forwarded
.br
* V: video frames are copied, audio frames are forwarded
.br
* AV: all frames are copied
.br

.br
sclock (boolean, default: false):        use system clock (us) instead of device timestamp (for buggy devices)
.br
probes (unsigned int, default: 10, minmax: 0-100): probe a given number of video frames before emitting - this usually helps with bad timing of the first frames
.br
* (string, no default, meta):            any possible args defined for AVInputFormat and AVFormatContext. See gpac -hx ffavin and gpac -hx ffavin:*
.br

.br
.SH ffsws
.LP
.br
Description: FFMPEG video rescaler
.br

.br
For bicubic, to tune the shape of the basis function, -p1 tunes f(1) and -p2 f´(1)
.br
For gauss -p1 tunes the exponent and thus cutoff frequency
.br
For lanczos -p1 tunes the width of the window function
.br
See FFMPEG documentation (https://ffmpeg.org/documentation.html) for more detailed info on rescaler options
.br

.br
.SH Options (expert):
.LP
.br
osize (vec2d int, no default):           osize of output video. When not set, input osize is used
.br
ofmt (pixel format, default: none, minmax: none,yuv420,yuv420_10,yuv422,yuv422_10,yuv444,yuv444_10,uyvy,vyuy,yuyv,yvyu,nv12,nv21,nv1l,nv2l,yuva,yuvd,grey,algr,gral,rgb4,rgb5,rgb6,rgba,argb,bgra,abgr,rgb,bgr,xrgb,rgbx,xbgr,bgrx,rgbd,rgbds,rgbs,rgbas): pixel format for output video. When not set, input format is used
.br
scale (enum, default: bicubic):          scaling mode - see filter info
.br

.br
p1 (number, default: +I):                scaling algo param1 - see filter info
.br
p2 (number, default: +I):                scaling algo param2 - see filter info
.br

.br
.SH ffenc
.LP
.br
Description: FFMPEG encoder
.br

.br
See FFMPEG documentation (https://ffmpeg.org/documentation.html) for more detailed info on encoder options
.br
Note: if no codec is explicited through -ffc option and no pixel format is given, codecs will be enumerated to find a matching pixel format.
.br

.br

.br
.SH Options (expert):
.LP
.br
c (string, no default):                  codec identifier. Can be any supported GPAC ID or ffmpeg ID or filter subclass name
.br
pfmt (pixel format, default: none):      pixel format for input video. When not set, input format is used
.br
fintra (fraction, default: 0):           force intra / IDR frames at the given period in sec, eg fintra=60000/1001 will force an intra every 2 seconds on 29.97 fps video; ignored for audio
.br
all_intra (boolean, default: false, updatable): only produce intra frames
.br
ls (boolean, default: false):            output log
.br
ffc (string, no default):                ffmpeg codec name. This allows enforcing a given codec if multiple codecs support the codec ID set (eg aac vs vo_aacenc)
.br
* (string, no default, meta):            any possible args defined for AVCodecContext and sub-classes. see gpac -hx ffenc and gpac -hx ffenc:*
.br

.br
.SH ohevcdec
.LP
.br
Description: OpenHEVC decoder
.br

.br
This filter decodes HEVC and LHVC (HEVC scalable extensions) from one or more PIDs through the OpenHEVC library
.br

.br
.SH Options (expert):
.LP
.br
threading (enum, default: frame):        set threading mode
.br
* frameslice: parallel decoding of both frames and slices
.br
* frame: parallel decoding of frames
.br
* slice: parallel decoding of slices
.br

.br
nb_threads (unsigned int, default: 0):   set number of threads. If 0, uses number of cores minus one
.br
no_copy (boolean, default: false):       directly dispatch internal decoded frame without copy
.br
pack_hfr (boolean, default: false):      pack 4 consecutive frames in a single output
.br
seek_reset (boolean, default: false):    reset decoder when seeking
.br
force_stereo (boolean, default: false):  force stereo output for multiview (top-bottom only)
.br
reset_switch (boolean, default: false):  reset decoder at config change
.br

.br
.SH EXAMPLES
.TP
Basic and advanced examples are available at https://github.com/gpac/gpac/wiki/Filters
.SH MORE
.LP
Authors: GPAC developers, see git repo history (-log)
.br
For bug reports, feature requests, more information and source code, visit http://github.com/gpac/gpac
.br
build: 0.9.0-ALPHA-rev3572-g2b9525804-buildbot-filters
.br
Copyright: (c) 2000-2019 Telecom ParisTech distributed under LGPL v2.1+ - http://gpac.io
.br
.SH SEE ALSO
.LP
gpac(1), MP4Client(1), MP4Box(1)
