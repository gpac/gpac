

InitialObjectDescriptor {
 esDescr [
  ES_Descriptor {
   ES_ID 1
   decConfigDescr DecoderConfigDescriptor {
    objectTypeIndication 1
    streamType 3
    decSpecificInfo BIFSv2Config {
     pixelMetric true
     pixelWidth 480
     pixelHeight 360
    }
   }
  }
 ]
}

DEF ROOT OrderedGroup {
 children [
  Background2D {
   backColor 0 0 0
  }
  
  Transform2D {
   translation -200 0
   children [
    Shape {
     appearance DEF N1 Appearance {
      material Material2D {
       emissiveColor 1 1 1
       filled true
      }
     }
     geometry DEF TXT Text {
      string ["	0	""	00:00:00.000	"]
      fontStyle DEF FONTSTYLE1 FontStyle {
       family ["Arial"]
       style "BOLD"
       justify ["BEGIN" "MIDDLE"]
       size 25
      }
     }
    }
   ]
  }
  
  Transform2D {
     translation 0 -140
     children [
      Shape {
       appearance USE N1
       geometry DEF LABEL Text {
        string ["Counter Sequence powered by GPAC" "50 FPS - resolution 1920x1080" "(c) 2016 Telecom ParisTech - http://gpac.io"]
        fontStyle DEF FONTSTYLE2 FontStyle {
         family ["Arial"]
         style "BOLD"
         justify ["MIDDLE" "MIDDLE"]
         size 12
        }
       }
      }
     ]
  }

  Transform2D {
        translation 120 0 
        children [
            #background shape
            Shape {
                geometry Circle { radius 100 }
                appearance  Appearance {
                    material DEF BACK_CIRCLE_COL Material2D { 
                      emissiveColor 0.5 0.5 0.5
                        filled TRUE
                    }  
                }
            }
            #front shape
            Shape {
                geometry XCurve2D {
                    # Move to the top of the circle, 
                    # define 2 focal points at the center of the coordinate system,
                    # define an anti-clock-wise arc to 100 (cos(a), sin(a))
                    # return to the center and close
                    type [5 1 6]
                    point DEF CIRCLE_COORDS Coordinate2D { 
                        point [ 0 100 0 0 0 0 24.86898872   96.85831611 0 0 ] 
                    }
                }
                appearance DEF BACK_CIRCLE_APP Appearance {
                    material DEF CIRCLE_COL Material2D { 
                      emissiveColor 1 1 1
                        filled TRUE
                    }  
                }
            }
        ]
    }
    DEF TS TimeSensor {
        loop TRUE
    }
    DEF SC Script {
        eventIn SFFloat set_fraction
        field SFNode root USE ROOT
        field SFNode app_back USE BACK_CIRCLE_COL
        field SFNode app USE CIRCLE_COL
        field SFNode coords USE CIRCLE_COORDS
        field SFNode text USE TXT
        field SFNode label USE LABEL

    url ["vrmlscript:
        var fps = gpac.sim_fps;
        var width = 480;
        var height = 360;

        //resize event callback
        function on_resize(evt) {
            width = evt.width;
            height = evt.height;
            fps = gpac.sim_fps;
            label.string[1] = '' + fps + ' FPS - resolution ' + width + 'x' + height;
        }
        root.addEventListener('resize', on_resize, 0);

        var mPI = 3.141592653589793;
        var cycles = 0;

        function set_fraction(value) {
            var num_frame = Math.round(fps * value);
            if (num_frame >= fps) {
                cycles++;
                num_frame = 0;
            }
//            alert('frame is ' + num_frame);

            var angle = mPI/2 - 2*mPI*num_frame/fps;
            var x = 100 * Math.cos(angle);
            var y = 100 * Math.sin(angle);
            coords.point[3] = new SFVec2f(x, y);
//            alert('coords are ' + coords.point[3]);

            if (cycles % 2) {
                app_back.emissiveColor.r = 1.0;
                app_back.emissiveColor.g = 1.0;
                app_back.emissiveColor.b = 1.0;
                app.emissiveColor.r = 0.5;
                app.emissiveColor.g = 0.5;
                app.emissiveColor.b = 0.5;
            } else {
                app_back.emissiveColor.r = 0.5;
                app_back.emissiveColor.g = 0.5;
                app_back.emissiveColor.b = 0.5;
                app.emissiveColor.r = 1.0;
                app.emissiveColor.g = 1.0;
                app.emissiveColor.b = 1.0;
            }
            text.string[0] = '' + Math.round(fps*cycles + num_frame);
            var h = Math.round(cycles/3600);
            var m = Math.round(cycles/60 - h*60);
            var s = Math.round(cycles - h*3600 - m*60);
            hs = ((h<10) ? '0' : '') + h;
            ms = ((m<10) ? '0' : '') + m;
            ss = ((s<10) ? '0' : '') + s;
            var f = Math.round(1000*num_frame/fps);
            fs = ( (f<10) ? '00' : ( (f<100) ? '0' : '')) + f;
            text.string[1] = '' + hs + ':' + ms + ':' + ss + '.' + fs;
        }

    "]
    }
    ]
}
ROUTE TS.fraction_changed TO SC.set_fraction


